#!/bin/bash
set -e

echo "üîç Running HireSync pre-commit hooks..."

# Get the git root directory
GIT_ROOT=$(git rev-parse --show-toplevel)
cd "$GIT_ROOT" || exit 1

# Script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Get changed Java files
CHANGED_JAVA_FILES=$(git diff --cached --name-only --diff-filter=ACMR | grep -E "\.java$" || true)
CHANGED_FILES_COUNT=$(echo "$CHANGED_JAVA_FILES" | wc -l)

# Detect if this is a merge commit
if [ -f .git/MERGE_HEAD ]; then
  echo "üîÑ Merge commit detected, skipping pre-commit hooks"
  exit 0
fi

if [ -z "$CHANGED_JAVA_FILES" ]; then
  echo "‚úÖ No Java files changed. Skipping Java code checks."
else
  echo "üîç Found $CHANGED_FILES_COUNT Java files to check"
fi

# Check if we're in a Docker environment
IN_DOCKER=false
if [ -f "docker/docker-compose.local.yaml" ] && command -v docker &> /dev/null; then
  # Check if devtools container is running
  if docker ps --format '{{.Names}}' | grep -q "hiresync-devtools"; then
    IN_DOCKER=true
    echo "üê≥ Using Docker container for checks"
  fi
fi

# Function to run commands in Docker if available
run_check() {
  local cmd="$1"
  local description="$2"
  
  echo -e "\nüîÑ $description..."
  
  if [ "$IN_DOCKER" = true ]; then
    docker exec hiresync-devtools $cmd
  else
    eval "$cmd"
  fi
  
  local result=$?
  if [ $result -eq 0 ]; then
    echo "‚úÖ $description passed!"
    return 0
  else
    echo "‚ùå $description failed! Please fix the issues before committing."
    return 1
  fi
}

# Check for merge conflicts
echo -e "\nüîÑ Checking for merge conflicts..."
CONFLICT_FILES=$(git diff --cached --name-only --diff-filter=ACM | xargs grep -l "^<<<<<<< " 2>/dev/null || true)
if [ -n "$CONFLICT_FILES" ]; then
  echo "‚ùå Merge conflict markers detected in:"
  echo "$CONFLICT_FILES"
  echo "Please resolve conflicts before committing."
  exit 1
else
  echo "‚úÖ No merge conflicts found"
fi

# Check for large files (>500KB)
echo -e "\nüîÑ Checking for large files..."
LARGE_FILES=$(git diff --cached --name-only --diff-filter=ACM | xargs ls -l 2>/dev/null | awk '$5 > 500000 {print $9}' || true)
if [ -n "$LARGE_FILES" ]; then
  echo "‚ö†Ô∏è Warning: Large files detected in commit:"
  echo "$LARGE_FILES"
  echo "Consider adding them to .gitignore if they're not needed in the repository."
  # Don't fail the commit, just warn
else
  echo "‚úÖ No large files detected"
fi

# Validate commit message format if available
if [ -f "$GIT_ROOT/.git/COMMIT_EDITMSG" ]; then
  echo -e "\nüîÑ Validating commit message format..."
  COMMIT_MSG=$(cat "$GIT_ROOT/.git/COMMIT_EDITMSG" | grep -v "^#")
  COMMIT_REGEX="^(feat|fix|docs|style|refactor|perf|test|chore|ci|build|revert)(\(.+\))?:.{1,100}"
  
  if ! [[ "$COMMIT_MSG" =~ $COMMIT_REGEX ]]; then
    echo "‚ö†Ô∏è Warning: Commit message does not follow conventional commit format."
    echo "Recommended format: type(scope): message"
    echo "Types: feat, fix, docs, style, refactor, perf, test, chore, ci, build, revert"
    echo "Example: feat(auth): add user registration endpoint"
    # Don't fail the commit, just warn
  else 
    echo "‚úÖ Commit message format is valid"
  fi
fi

# Quick compile check if Java files changed
if [ -n "$CHANGED_JAVA_FILES" ]; then
  if ! run_check "mvn compile -q" "Compilation check"; then
    exit 1
  fi

  # Run checkstyle on changed files only
  JAVA_FILES_CSV=$(echo "$CHANGED_JAVA_FILES" | tr '\n' ',')
  if [ -n "$JAVA_FILES_CSV" ]; then
    if ! run_check "mvn checkstyle:check -Dcheckstyle.includes=$JAVA_FILES_CSV -Dcheckstyle.failOnViolation=true -q" "Checkstyle formatting"; then
      exit 1
    fi
  fi
  
  # Run PMD on changed files only using main ruleset
  if [ -n "$JAVA_FILES_CSV" ]; then
    MAIN_PMD_RULESET="src/main/resources/pmd-rules.xml"
    if ! run_check "mvn pmd:check -Drulesets=$MAIN_PMD_RULESET -Dincludes=$JAVA_FILES_CSV -q" "PMD check (changed files only)"; then
      echo "Note: For a full PMD check, run: ./scripts/quality-check.sh pmd"
      exit 1
    fi
  fi
fi

echo -e "\n‚ú® All pre-commit checks passed!"

exit 0 