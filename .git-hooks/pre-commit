#!/bin/bash

# Pre-commit hook to enforce code quality standards
# This hook will run automatically before every commit
# It performs code quality checks and auto-formatting

# Exit on any error
set -e

echo "‚ö° Running pre-commit quality checks..."

# Store the root directory of the git repository
REPO_ROOT=$(git rev-parse --show-toplevel)

# Stash any changes not staged for this commit
echo "üì¶ Stashing unstaged changes..."
STASH_NAME="pre-commit-$(date +%s)"
git stash push -q --keep-index --include-untracked --message "$STASH_NAME"
STASH_RESULT=$?

# Setup exit trap to restore stashed changes
cleanup() {
  echo "üîÑ Restoring unstaged changes..."
  # Only pop from stash if we actually stashed something
  if [ "$STASH_RESULT" -eq 0 ] && [ -n "$(git stash list | grep "$STASH_NAME")" ]; then
    git stash pop -q "stash@{0}" || true
  fi
}

# Register the cleanup function to be called on exit
trap cleanup EXIT

# Function to run Maven with proper error handling
run_maven() {
  local CMD=$1
  local MSG=$2
  local IGNORE_ERROR=${3:-false}
  
  echo "   - $MSG..."
  if [ -f "$REPO_ROOT/mvnw" ]; then
    "$REPO_ROOT/mvnw" -q $CMD > /dev/null 2>&1
  else
    mvn -q $CMD > /dev/null 2>&1
  fi
  
  local EXIT_CODE=$?
  if [ $EXIT_CODE -ne 0 ] && [ "$IGNORE_ERROR" = "false" ]; then
    echo "‚ùå $MSG failed. Fix issues before committing."
    exit 1
  elif [ $EXIT_CODE -ne 0 ]; then
    echo "‚ö†Ô∏è $MSG had issues, but continuing anyway."
    return 1
  fi
  
  return 0
}

# Get list of staged files
STAGED_FILES=$(git diff --name-only --cached --diff-filter=ACM | grep -E '\.(java|xml|properties|yml|yaml)$' || true)

if [ -z "$STAGED_FILES" ]; then
  echo "‚úÖ No relevant files to check."
  exit 0
fi

# Correct line endings if needed
echo "üîÑ Checking line endings..."
if [ -f "$REPO_ROOT/.git-hooks/correct-line-endings.sh" ]; then
  # Use the enhanced line endings script as primary method
  bash "$REPO_ROOT/.git-hooks/correct-line-endings.sh" > /dev/null 2>&1
  
  if [ $? -ne 0 ]; then
    echo "‚ö†Ô∏è Line ending correction had issues, but continuing anyway."
  else
    # If the script succeeded and found changes, stage them
    if ! git diff --quiet; then
      echo "üìù Adding files with corrected line endings..."
      git add -u
    fi
  fi
elif [ -f "$REPO_ROOT/scripts/quality/quality-check.sh" ]; then
  # Fall back to the quality check script if available
  bash "$REPO_ROOT/scripts/quality/quality-check.sh" --line-endings-only > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    echo "‚ö†Ô∏è Line ending correction had issues, but continuing anyway."
  fi
fi

echo "üîç Running code quality checks on staged files..."

# Step 1: Run Spotless to format code
run_maven "spotless:apply" "Applying code formatting" false

# Step 2: Run Maven Enforcer to check for project rules
run_maven "enforcer:enforce" "Verifying project rules and dependencies" true

# Step 3: Run Checkstyle for basic code standards
run_maven "checkstyle:check" "Checking code style" true

# Step 4: Fix imports with Maven Tidy if available
if [ -f "pom.xml" ]; then
  run_maven "org.codehaus.mojo:tidy-maven-plugin:1.1.0:pom -Dquiet=true" "Organizing imports" true
fi

# Step 5: Check for high-priority bugs with SpotBugs (optional, don't fail commit)
run_maven "com.github.spotbugs:spotbugs-maven-plugin:check -Dspotbugs.threshold=High -Dspotbugs.effort=Min" "Checking for critical bugs" true

# Step 6: Check for exceptionally large files that may bloat the repository
echo "   - Checking for large files..."
for FILE in $(git diff --name-only --cached --diff-filter=ACM); do
  # Skip files that aren't readable
  if [ ! -f "$FILE" ]; then
    continue
  fi
  
  # Get file size in kilobytes
  FILE_SIZE=$(du -k "$FILE" | cut -f1)
  
  # If file is larger than D5MB (5120KB), warn the user
  if [ "$FILE_SIZE" -gt 5120 ]; then
    echo "‚ö†Ô∏è WARNING: Large file detected: $FILE (${FILE_SIZE}KB)"
    echo "   - Large files can bloat your repository"
    echo "   - Consider using Git LFS for files larger than 5MB"
    # We don't block the commit, but provide a clear warning
  fi
done

# Stage any files that were modified by the formatting tools
echo "üìù Staging auto-formatted files..."
git add $STAGED_FILES

# Final success message
echo "‚úÖ Pre-commit checks passed! Proceeding with commit..."
exit 0 