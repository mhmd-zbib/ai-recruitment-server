#!/bin/bash
#
# pre-commit hook for HireSync project
# Runs code quality checks before allowing commit

set -e

# Determine script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}========== HireSync Pre-Commit Hook ==========${NC}"

# Function to check if a command exists
command_exists() {
  command -v "$1" >/dev/null 2>&1
}

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(java|xml|properties|yml|yaml)$' || true)

if [ -z "$STAGED_FILES" ]; then
  echo -e "${GREEN}No Java, XML, or property files staged. Skipping checks.${NC}"
  exit 0
fi

# Check for Java
if ! command_exists java; then
  echo -e "${YELLOW}Warning: Java not found. Some checks will be skipped.${NC}"
fi

# Check for Maven
MVN_CMD="mvn"
if [ -f "$PROJECT_ROOT/mvnw" ]; then
  MVN_CMD="$PROJECT_ROOT/mvnw"
fi

# 1. Run Spotless to check code formatting
echo -e "${BLUE}Checking code formatting with Spotless...${NC}"
if [ -f "$PROJECT_ROOT/pom.xml" ] && command_exists java; then
  cd "$PROJECT_ROOT"
  if ! $MVN_CMD spotless:check -q; then
    echo -e "${RED}Code formatting issues detected. Running auto-fix...${NC}"
    if $MVN_CMD spotless:apply -q; then
      echo -e "${GREEN}Code formatting fixed automatically. Please review and stage the changes.${NC}"
      echo -e "${YELLOW}Run: git add <files>${NC}"
      exit 1
    else
      echo -e "${RED}Failed to fix code formatting. Please fix manually.${NC}"
      exit 1
    fi
  fi
  echo -e "${GREEN}Code formatting check passed.${NC}"
else
  echo -e "${YELLOW}Warning: Skipping Spotless checks (Maven or Java not available).${NC}"
fi

# 2. Check for sensitive information
echo -e "${BLUE}Checking for sensitive information...${NC}"
SENSITIVE_PATTERNS=(
  "[Pp]assword[\s]*=[\s]*['\"]?[^'\"]*['\"]?"
  "[Ss]ecret[\s]*=[\s]*['\"]?[^'\"]*['\"]?"
  "[Cc]redential[\s]*=[\s]*['\"]?[^'\"]*['\"]?"
  "[Aa][Pp][Ii][_]?[Kk][Ee][Yy][\s]*=[\s]*['\"]?[^'\"]*['\"]?"
  "[Aa][Cc][Cc][Ee][Ss][Ss][_]?[Kk][Ee][Yy][\s]*=[\s]*['\"]?[^'\"]*['\"]?"
)

CHECK_FAILED=false
for FILE in $STAGED_FILES; do
  for PATTERN in "${SENSITIVE_PATTERNS[@]}"; do
    if git diff --cached "$FILE" | grep -E "$PATTERN" | grep -v -E "(localhost|127.0.0.1|dummy|example|test|placeholder)"; then
      echo -e "${RED}Possible sensitive information found in $FILE${NC}"
      CHECK_FAILED=true
    fi
  done
done

if [ "$CHECK_FAILED" = true ]; then
  echo -e "${RED}Sensitive information checks failed. Please remove sensitive data.${NC}"
  echo -e "${YELLOW}Tip: Store sensitive information in environment variables or secure vaults.${NC}"
  exit 1
fi
echo -e "${GREEN}Sensitive information check passed.${NC}"

# 3. Quick compilation check on modified Java files
JAVA_FILES=$(echo "$STAGED_FILES" | grep -E '\.java$' || true)
if [ -n "$JAVA_FILES" ] && command_exists java; then
  echo -e "${BLUE}Running quick compilation check...${NC}"
  if [ -f "$PROJECT_ROOT/pom.xml" ]; then
    cd "$PROJECT_ROOT"
    if ! $MVN_CMD compiler:compile -q; then
      echo -e "${RED}Compilation failed. Please fix the issues before committing.${NC}"
      exit 1
    fi
    echo -e "${GREEN}Compilation check passed.${NC}"
  fi
fi

# All checks passed
echo -e "${GREEN}All pre-commit checks passed!${NC}"
exit 0 