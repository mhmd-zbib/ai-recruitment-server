#!/bin/bash
#
# Enhanced pre-commit hook for HireSync project
# Runs comprehensive code quality checks before allowing commit

set -e

# Determine script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m' # No Color

echo -e "${BLUE}${BOLD}========== HireSync Advanced Pre-Commit Quality Gate ==========${NC}"

# Function to check if a command exists
command_exists() {
  command -v "$1" >/dev/null 2>&1
}

# Optional checks configuration (can be enabled in git config)
RUN_TESTS=$(git config --get hooks.precommit.tests || echo "false")
RUN_CHECKSTYLE=$(git config --get hooks.precommit.checkstyle || echo "true")
RUN_PMD=$(git config --get hooks.precommit.pmd || echo "false")
QUICK_MODE=$(git config --get hooks.precommit.quick || echo "true")

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(java|xml|properties|yml|yaml)$' || true)

if [ -z "$STAGED_FILES" ]; then
  echo -e "${GREEN}No Java, XML, or property files staged. Skipping checks.${NC}"
  exit 0
fi

# Check for Java
if ! command_exists java; then
  echo -e "${YELLOW}Warning: Java not found. Some checks will be skipped.${NC}"
fi

# Check for Maven
MVN_CMD="mvn"
if [ -f "$PROJECT_ROOT/mvnw" ]; then
  MVN_CMD="$PROJECT_ROOT/mvnw"
fi

# STEP 1: Format check and fix with Spotless
echo -e "\n${CYAN}${BOLD}[1/6]${NC} ${BLUE}Checking code formatting with Spotless...${NC}"
if [ -f "$PROJECT_ROOT/pom.xml" ] && command_exists java; then
  cd "$PROJECT_ROOT"
  
  # Create a temporary file with the list of staged files
  STAGED_FILES_LIST=$(mktemp)
  echo "$STAGED_FILES" > "$STAGED_FILES_LIST"
  
  # Run spotless only on staged files
  if ! $MVN_CMD spotless:check -q -DspotlessFiles="$STAGED_FILES_LIST"; then
    echo -e "${YELLOW}Code formatting issues detected. Running auto-fix...${NC}"
    if $MVN_CMD spotless:apply -q -DspotlessFiles="$STAGED_FILES_LIST"; then
      echo -e "${GREEN}Code formatting fixed automatically. Please review and stage the changes.${NC}"
      echo -e "${YELLOW}Run: git add <files>${NC}"
      # Clean up temporary file
      rm -f "$STAGED_FILES_LIST"
      exit 1
    else
      # Clean up temporary file
      rm -f "$STAGED_FILES_LIST"
      echo -e "${RED}Failed to fix code formatting. Please fix manually.${NC}"
      exit 1
    fi
  fi
  
  # Clean up temporary file
  rm -f "$STAGED_FILES_LIST"
  echo -e "${GREEN}✓ Code formatting check passed.${NC}"
else
  echo -e "${YELLOW}Warning: Skipping Spotless checks (Maven or Java not available).${NC}"
fi

# STEP 2: Run Checkstyle on staged files (if enabled)
if [ "$RUN_CHECKSTYLE" = "true" ] && [ -f "$PROJECT_ROOT/pom.xml" ] && command_exists java; then
  echo -e "\n${CYAN}${BOLD}[2/6]${NC} ${BLUE}Running Checkstyle code quality check...${NC}"
  cd "$PROJECT_ROOT"
  
  JAVA_FILES=$(echo "$STAGED_FILES" | grep -E '\.java$' || true)
  if [ -n "$JAVA_FILES" ]; then
    # Temporarily enable checkstyle in Maven
    $MVN_CMD -q exec:exec -Dexec.executable="echo" -Dexec.args="-Dcheckstyle.skip=false" > /dev/null
    
    # Create a Java-only file list for checkstyle
    JAVA_FILES_LIST=$(mktemp)
    echo "$JAVA_FILES" > "$JAVA_FILES_LIST"
    
    if ! $MVN_CMD checkstyle:check -q -DcheckstyleFiles="$JAVA_FILES_LIST" -Dcheckstyle.skip=false; then
      echo -e "${RED}Checkstyle violations found. Please fix the style issues.${NC}"
      rm -f "$JAVA_FILES_LIST"
      exit 1
    fi
    
    rm -f "$JAVA_FILES_LIST"
    echo -e "${GREEN}✓ Checkstyle check passed.${NC}"
  else
    echo -e "${GREEN}No Java files to check with Checkstyle.${NC}"
  fi
fi

# STEP 3: Check for sensitive information in staged files
echo -e "\n${CYAN}${BOLD}[3/6]${NC} ${BLUE}Checking for sensitive information...${NC}"
SENSITIVE_PATTERNS=(
  "[Pp]assword[\s]*=[\s]*['\"]?[^'\"]*['\"]?"
  "[Ss]ecret[\s]*=[\s]*['\"]?[^'\"]*['\"]?"
  "[Cc]redential[\s]*=[\s]*['\"]?[^'\"]*['\"]?"
  "[Aa][Pp][Ii][_]?[Kk][Ee][Yy][\s]*=[\s]*['\"]?[^'\"]*['\"]?"
  "[Aa][Cc][Cc][Ee][Ss][Ss][_]?[Kk][Ee][Yy][\s]*=[\s]*['\"]?[^'\"]*['\"]?"
  "[Tt][Oo][Kk][Ee][Nn][\s]*=[\s]*['\"]?[^'\"]*['\"]?"
  "private[\s]+[final\s]+[static\s]+String[\s]+[A-Z_]*(KEY|SECRET|PASSWORD|CREDENTIAL)"
)

CHECK_FAILED=false
for FILE in $STAGED_FILES; do
  for PATTERN in "${SENSITIVE_PATTERNS[@]}"; do
    if git diff --cached "$FILE" | grep -E "$PATTERN" | grep -v -E "(localhost|127.0.0.1|dummy|example|test|placeholder|\\$\\{)"; then
      echo -e "${RED}Possible sensitive information found in $FILE${NC}"
      CHECK_FAILED=true
    fi
  done
done

if [ "$CHECK_FAILED" = true ]; then
  echo -e "${RED}Sensitive information checks failed. Please remove sensitive data.${NC}"
  echo -e "${YELLOW}Tip: Store sensitive information in environment variables or secure vaults.${NC}"
  exit 1
fi
echo -e "${GREEN}✓ Sensitive information check passed.${NC}"

# STEP 4: Run quick compilation check
echo -e "\n${CYAN}${BOLD}[4/6]${NC} ${BLUE}Running compilation check...${NC}"
JAVA_FILES=$(echo "$STAGED_FILES" | grep -E '\.java$' || true)
if [ -n "$JAVA_FILES" ] && command_exists java; then
  if [ -f "$PROJECT_ROOT/pom.xml" ]; then
    cd "$PROJECT_ROOT"
    
    # For quick mode, just compile everything
    if [ "$QUICK_MODE" = "true" ]; then
      echo -e "${BLUE}Compiling all Java sources...${NC}"
      if ! $MVN_CMD compiler:compile -q; then
        echo -e "${RED}Compilation failed. Please fix the issues before committing.${NC}"
        exit 1
      fi
    else
      # Compile each staged file individually for detailed feedback
      COMPILE_STATUS=0
      for FILE in $JAVA_FILES; do
        echo -e "${BLUE}Compiling $FILE...${NC}"
        # Extract the package name from the file to determine the class name
        PACKAGE=$(grep -E "^package" "$FILE" | sed -E 's/package\s+([^;]+);/\1/')
        CLASS_NAME=$(basename "$FILE" .java)
        FULL_CLASS="$PACKAGE.$CLASS_NAME"
        
        if ! $MVN_CMD compiler:compile -q -Dinclude="$FULL_CLASS"; then
          echo -e "${RED}Compilation failed for $FILE.${NC}"
          COMPILE_STATUS=1
        fi
      done
      
      if [ $COMPILE_STATUS -ne 0 ]; then
        echo -e "${RED}Compilation checks failed. Please fix the issues before committing.${NC}"
        exit 1
      fi
    fi
    echo -e "${GREEN}✓ Compilation check passed.${NC}"
  fi
fi

# STEP 5: Check for code complexity and architecture issues
echo -e "\n${CYAN}${BOLD}[5/6]${NC} ${BLUE}Checking for architecture issues...${NC}"
if [ -n "$JAVA_FILES" ] && [ "$RUN_PMD" = "true" ] && command_exists java; then
  cd "$PROJECT_ROOT"
  
  JAVA_FILES_LIST=$(mktemp)
  echo "$JAVA_FILES" > "$JAVA_FILES_LIST"
  
  if ! $MVN_CMD pmd:check -q -DtargetFiles="$JAVA_FILES_LIST"; then
    echo -e "${YELLOW}PMD found code quality issues. Consider fixing these issues.${NC}"
    # Not failing build, just warning
  fi
  
  rm -f "$JAVA_FILES_LIST"
else
  echo -e "${YELLOW}Skipping PMD checks (not enabled or Java not available).${NC}"
fi

# STEP 6: Run unit tests affected by changes (if enabled)
if [ "$RUN_TESTS" = "true" ] && [ -f "$PROJECT_ROOT/pom.xml" ] && command_exists java; then
  echo -e "\n${CYAN}${BOLD}[6/6]${NC} ${BLUE}Running relevant tests...${NC}"
  cd "$PROJECT_ROOT"
  
  # Extract package names from modified files
  PACKAGES=()
  for FILE in $JAVA_FILES; do
    if [ -f "$FILE" ]; then
      PACKAGE=$(grep -E "^package" "$FILE" | sed -E 's/package\s+([^;]+);/\1/')
      if [ -n "$PACKAGE" ]; then
        PACKAGES+=("$PACKAGE")
      fi
    fi
  done
  
  # Run tests for affected packages
  if [ ${#PACKAGES[@]} -gt 0 ]; then
    for PACKAGE in "${PACKAGES[@]}"; do
      echo -e "${BLUE}Running tests for package: $PACKAGE${NC}"
      $MVN_CMD test -q -Dtest="$PACKAGE.**" || {
        echo -e "${RED}Tests failed. Please fix the failing tests before committing.${NC}"
        exit 1
      }
    done
    echo -e "${GREEN}✓ All tests passed.${NC}"
  else
    echo -e "${GREEN}No specific packages identified for testing.${NC}"
  fi
else
  echo -e "${YELLOW}Skipping test execution (not enabled or Maven/Java not available).${NC}"
fi

# All checks passed
echo -e "\n${GREEN}${BOLD}✓ All pre-commit quality checks passed! Your code meets the quality standards.${NC}"
echo -e "${BLUE}You can customize pre-commit checks with:${NC}"
echo -e "  git config hooks.precommit.tests true      ${YELLOW}# Enable/disable test execution${NC}"
echo -e "  git config hooks.precommit.checkstyle true ${YELLOW}# Enable/disable checkstyle${NC}"
echo -e "  git config hooks.precommit.pmd true        ${YELLOW}# Enable/disable PMD analysis${NC}"
echo -e "  git config hooks.precommit.quick true      ${YELLOW}# Use faster compilation mode${NC}"

exit 0 