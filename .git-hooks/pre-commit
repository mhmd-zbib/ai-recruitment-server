#!/bin/bash
#
# Enhanced pre-commit hook for HireSync project
# Optimized for quick linting of staged files

set -e

# Determine script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(git rev-parse --show-toplevel)"

# Change to project root directory to ensure all relative paths work
cd "$PROJECT_ROOT"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m' # No Color

echo -e "${BLUE}${BOLD}========== HireSync Pre-Commit Quality Check ==========${NC}"

# Function to check if a command exists
command_exists() {
  command -v "$1" >/dev/null 2>&1
}

# Find required tools
find_java() {
  if [ -n "$JAVA_HOME" ] && [ -x "$JAVA_HOME/bin/java" ]; then
    echo "$JAVA_HOME/bin/java"
    return 0
  fi
  
  if command_exists java; then
    echo "java"
    return 0
  fi
  
  # Common installation directories
  for path in "/usr/bin/java" "/usr/local/bin/java" "/opt/jdk/bin/java" "C:/Program Files/Java/*/bin/java.exe"; do
    if [ -x "$path" ]; then
      echo "$path"
      return 0
    fi
  done
  
  return 1
}

find_maven() {
  if [ -f "$PROJECT_ROOT/mvnw" ]; then
    echo "$PROJECT_ROOT/mvnw"
    return 0
  fi
  
  if command_exists mvn; then
    echo "mvn"
    return 0
  fi
  
  if [ -n "$M2_HOME" ] && [ -x "$M2_HOME/bin/mvn" ]; then
    echo "$M2_HOME/bin/mvn"
    return 0
  fi
  
  return 1
}

# Configuration (with Git config overrides)
LINT_MODE=$(git config --get hooks.precommit.lintMode || echo "quick")
FORMAT_CHECK=$(git config --get hooks.precommit.formatCheck || echo "true")
LINT_CHECK=$(git config --get hooks.precommit.lintCheck || echo "true")
COMPILATION_CHECK=$(git config --get hooks.precommit.compilationCheck || echo "true")
SECURITY_CHECK=$(git config --get hooks.precommit.securityCheck || echo "true")

# Skip hook if environment variable is set
if [ -n "$SKIP_PRECOMMIT_HOOK" ] || [ -n "$GIT_BYPASS_HOOKS" ]; then
  echo -e "${YELLOW}Pre-commit hook skipped due to SKIP_PRECOMMIT_HOOK or GIT_BYPASS_HOOKS${NC}"
  exit 0
fi

# Verify we're in the project root with pom.xml
if [ ! -f "pom.xml" ]; then
  echo -e "${RED}Error: pom.xml not found in project root: $PROJECT_ROOT${NC}"
  echo -e "${YELLOW}Make sure you're running this hook from the correct repository.${NC}"
  exit 1
fi

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(java|xml|properties|yml|yaml)$' || true)

if [ -z "$STAGED_FILES" ]; then
  echo -e "${GREEN}No Java, XML, or property files staged. Skipping checks.${NC}"
  exit 0
fi

# Find Java
JAVA_CMD=$(find_java)
if [ -z "$JAVA_CMD" ]; then
  echo -e "${RED}Java not found. Cannot run quality checks.${NC}"
  echo -e "${YELLOW}Use git commit --no-verify to bypass this check if needed.${NC}"
  exit 1
fi

# Find Maven
MVN_CMD=$(find_maven)
if [ -z "$MVN_CMD" ]; then
  echo -e "${RED}Maven not found. Cannot run quality checks.${NC}"
  echo -e "${YELLOW}Use git commit --no-verify to bypass this check if needed.${NC}"
  exit 1
fi

echo -e "${BLUE}Running checks from: ${PROJECT_ROOT}${NC}"

# Create a temp file with list of staged files (shared across checks)
STAGED_FILES_LIST=$(mktemp)
echo "$STAGED_FILES" > "$STAGED_FILES_LIST"
JAVA_FILES=$(echo "$STAGED_FILES" | grep -E '\.java$' || true)

# Track fatal issues vs warnings
FATAL_ISSUES=0
HAS_WARNINGS=0

# STEP 1: Format check and fix with Spotless (critical)
if [ "$FORMAT_CHECK" = "true" ] && [ -n "$JAVA_FILES" ]; then
  echo -e "\n${CYAN}${BOLD}[1/4]${NC} ${BLUE}Checking code formatting...${NC}"
  
  if ! "$MVN_CMD" spotless:check -q -DspotlessFiles="$STAGED_FILES_LIST" &> /dev/null; then
    echo -e "${YELLOW}Code formatting issues detected. Running auto-fix...${NC}"
    if "$MVN_CMD" spotless:apply -q -DspotlessFiles="$STAGED_FILES_LIST"; then
      echo -e "${YELLOW}⚠️ Code formatting fixed automatically. Please review and stage the changes:${NC}"
      echo -e "${YELLOW}   git add <files>${NC}"
      FATAL_ISSUES=$((FATAL_ISSUES+1))
    else
      echo -e "${RED}❌ Failed to fix code formatting.${NC}"
      FATAL_ISSUES=$((FATAL_ISSUES+1))
    fi
  else
    echo -e "${GREEN}✓ Code formatting check passed.${NC}"
  fi
fi

# STEP 2: Quick lint check (non-blocking, warning only)
if [ "$LINT_CHECK" = "true" ] && [ -n "$JAVA_FILES" ]; then
  echo -e "\n${CYAN}${BOLD}[2/4]${NC} ${BLUE}Running quick lint check...${NC}"
  
  # Checkstyle - quick check, warnings only
  if "$MVN_CMD" checkstyle:check -q -DcheckstyleFiles="$STAGED_FILES_LIST" -Dcheckstyle.skip=false &> /tmp/checkstyle_output; then
    echo -e "${GREEN}✓ Checkstyle check passed.${NC}"
  else
    echo -e "${YELLOW}⚠️ Checkstyle found issues:${NC}"
    cat /tmp/checkstyle_output | grep -E "WARNING|ERROR" | head -n 5
    echo -e "${YELLOW}   (See full report in target/checkstyle-result.xml)${NC}"
    HAS_WARNINGS=1
  fi
  
  # PMD - quick check with minimal rules, warnings only
  if [ "$LINT_MODE" = "thorough" ]; then
    if "$MVN_CMD" pmd:check -q -DtargetFiles="$STAGED_FILES_LIST" -Dpmd.skip=false &> /tmp/pmd_output; then
      echo -e "${GREEN}✓ PMD check passed.${NC}"
    else
      echo -e "${YELLOW}⚠️ PMD found issues (warnings only, won't block commit):${NC}"
      cat /tmp/pmd_output | grep -E "WARNING|ERROR" | head -n 5
      HAS_WARNINGS=1
    fi
  fi
fi

# STEP 3: Compilation check (critical)
if [ "$COMPILATION_CHECK" = "true" ] && [ -n "$JAVA_FILES" ]; then
  echo -e "\n${CYAN}${BOLD}[3/4]${NC} ${BLUE}Checking compilation...${NC}"
  
  if ! "$MVN_CMD" compiler:compile -q -DcompileSourceRoots="$STAGED_FILES_LIST" &> /tmp/compile_output; then
    echo -e "${RED}❌ Compilation failed:${NC}"
    cat /tmp/compile_output | grep -E "ERROR" | head -n 5
    FATAL_ISSUES=$((FATAL_ISSUES+1))
  else
    echo -e "${GREEN}✓ Compilation check passed.${NC}"
  fi
fi

# STEP 4: Check for sensitive information in staged files (critical)
if [ "$SECURITY_CHECK" = "true" ]; then
  echo -e "\n${CYAN}${BOLD}[4/4]${NC} ${BLUE}Checking for sensitive information...${NC}"
  SENSITIVE_PATTERNS=(
    "[Pp]assword[\s]*=[\s]*['\"]?[^'\"]*['\"]?"
    "[Ss]ecret[\s]*=[\s]*['\"]?[^'\"]*['\"]?"
    "[Cc]redential[\s]*=[\s]*['\"]?[^'\"]*['\"]?"
    "[Aa][Pp][Ii][_]?[Kk][Ee][Yy][\s]*=[\s]*['\"]?[^'\"]*['\"]?"
    "[Aa][Cc][Cc][Ee][Ss][Ss][_]?[Kk][Ee][Yy][\s]*=[\s]*['\"]?[^'\"]*['\"]?"
  )

  SECURITY_FAILED=0
  for FILE in $STAGED_FILES; do
    for PATTERN in "${SENSITIVE_PATTERNS[@]}"; do
      if git diff --cached "$FILE" | grep -E "$PATTERN" | grep -v -E "(localhost|127.0.0.1|dummy|example|test|placeholder|\\$\\{)"; then
        echo -e "${RED}❌ Possible sensitive information found in $FILE${NC}"
        SECURITY_FAILED=1
      fi
    done
  done

  if [ $SECURITY_FAILED -eq 1 ]; then
    echo -e "${RED}Security check failed. Remove sensitive data before committing.${NC}"
    FATAL_ISSUES=$((FATAL_ISSUES+1))
  else
    echo -e "${GREEN}✓ Sensitive information check passed.${NC}"
  fi
fi

# Cleanup
rm -f "$STAGED_FILES_LIST" /tmp/checkstyle_output /tmp/pmd_output /tmp/compile_output

# Summary and exit
echo -e "\n${BLUE}${BOLD}Pre-commit check summary:${NC}"
if [ $FATAL_ISSUES -gt 0 ]; then
  echo -e "${RED}❌ ${FATAL_ISSUES} critical issues found. Please fix before committing.${NC}"
  echo -e "${YELLOW}   Use git commit --no-verify to bypass this check if absolutely necessary.${NC}"
  exit 1
elif [ $HAS_WARNINGS -eq 1 ]; then
  echo -e "${YELLOW}⚠️ Warnings detected. The full code quality check will run in CI.${NC}"
  echo -e "${GREEN}✓ No critical issues found. Proceeding with commit.${NC}"
  exit 0
else
  echo -e "${GREEN}✓ All pre-commit quality checks passed!${NC}"
  echo -e "${BLUE}Customize checks with:${NC}"
  echo -e "  git config hooks.precommit.lintMode thorough   ${YELLOW}# For more thorough checks${NC}"
  echo -e "  git config hooks.precommit.formatCheck false   ${YELLOW}# Disable format checks${NC}"
  exit 0
fi 