#!/bin/bash
#
# pre-push hook for HireSync project
# Performs essential checks before pushing to remote

set -eo pipefail

# Colors for output
GREEN="\033[0;32m"
YELLOW="\033[0;33m"
RED="\033[0;31m"
BLUE="\033[0;34m"
NC="\033[0m"

echo -e "${BLUE}========== HireSync Pre-Push Hook ==========${NC}"

# Get repository root
REPO_ROOT=$(git rev-parse --show-toplevel)
cd "$REPO_ROOT"

# Parse arguments from Git
read local_ref local_sha remote_ref remote_sha

# Check for bypass flag
if [ -n "$GIT_BYPASS_HOOKS" ] || [ -n "$SKIP_HOOKS" ]; then
  echo -e "${YELLOW}Bypassing pre-push hooks (not recommended)${NC}"
  exit 0
fi

# Get branch names
TARGET_BRANCH=${remote_ref#refs/heads/}
CURRENT_BRANCH=$(git symbolic-ref --short HEAD 2>/dev/null)

# Skip for branch deletions
if [ "$local_sha" = "0000000000000000000000000000000000000000" ]; then
  echo -e "${BLUE}Branch deletion detected, skipping checks.${NC}"
  exit 0
fi

# Identify if target is a protected branch
if [[ "$TARGET_BRANCH" == "main" || "$TARGET_BRANCH" == "master" || "$TARGET_BRANCH" == "dev" || "$TARGET_BRANCH" =~ ^release/.*$ ]]; then
  PROTECTED_BRANCH=true
  echo -e "${BLUE}Pushing to protected branch: ${TARGET_BRANCH}${NC}"
else
  PROTECTED_BRANCH=false
fi

# Get changed files
if [ "$remote_sha" = "0000000000000000000000000000000000000000" ]; then
  # New branch, check against main/master
  BASE_COMMIT=$(git merge-base $local_sha main 2>/dev/null || git merge-base $local_sha master 2>/dev/null || echo HEAD~20)
  CHANGED_FILES=$(git diff --name-only --diff-filter=ACMR $BASE_COMMIT $local_sha)
else
  # Existing branch, check only new commits
  CHANGED_FILES=$(git diff --name-only --diff-filter=ACMR $remote_sha..$local_sha)
fi

# Filter for relevant files
CODE_FILES=$(echo "$CHANGED_FILES" | grep -E '\.(java|xml|yml|yaml|properties|sql)$' || echo "")

if [ -z "$CODE_FILES" ]; then
  echo -e "${GREEN}No code files changed, skipping checks.${NC}"
  exit 0
fi

# Reminder for large pushes
COMMIT_COUNT=$(git rev-list --count $remote_sha..$local_sha 2>/dev/null || echo "many")
if [ "$COMMIT_COUNT" -gt 10 ] 2>/dev/null; then
  echo -e "${YELLOW}You're pushing $COMMIT_COUNT commits. Consider smaller, focused pushes.${NC}"
fi

# Maven command function
run_maven() {
  local cmd="$1"
  local desc="$2"
  local required="${3:-false}"
  
  echo -e "${BLUE}Running: ${desc}${NC}"
  
  if [ -f "./mvnw" ]; then
    ./mvnw -q $cmd
  else
    mvn -q $cmd
  fi
  
  if [ $? -ne 0 ]; then
    if [ "$required" = "true" ]; then
      echo -e "${RED}ERROR: ${desc} failed${NC}"
      echo -e "${YELLOW}Fix the issues before pushing.${NC}"
      return 1
    else
      echo -e "${YELLOW}WARNING: ${desc} had issues but continuing${NC}"
      return 0
    fi
  fi
  
  echo -e "${GREEN}${desc} passed${NC}"
  return 0
}

# Always run basic checks
echo -e "${BLUE}Running code quality checks...${NC}"

# Spotless formatting check
run_maven "spotless:check" "Code formatting check" true || exit 1

# Compilation check
run_maven "compile" "Compilation check" true || exit 1

# For protected branches, run additional checks
if [ "$PROTECTED_BRANCH" = "true" ]; then
  echo -e "${BLUE}Running comprehensive checks for protected branch...${NC}"
  
  # Checkstyle 
  run_maven "checkstyle:check" "Code style check" true || exit 1
  
  # Tests
  run_maven "test -Dspring.profiles.active=test" "Unit tests" true || exit 1
fi

echo -e "${GREEN}âœ… All pre-push checks passed!${NC}"
exit 0 