#!/bin/bash

# post-checkout hook
# Runs after checkout (switching branches) to help with branch-specific setup and dependency checks

# Arguments provided by Git
PREVIOUS_HEAD=$1
NEW_HEAD=$2
BRANCH_CHECKOUT=$3 # 1=branch checkout, 0=file checkout

# Exit if this is a file checkout
if [ "$BRANCH_CHECKOUT" -ne 1 ]; then
    exit 0
fi

# ANSI color codes for output formatting
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NC='\033[0m' # No Color

echo -e "${BLUE}${BOLD}=== Post-Checkout Tasks ===${NC}"

# Store the root directory of the git repository
REPO_ROOT=$(git rev-parse --show-toplevel)

# Get the name of the branch we just checked out
BRANCH_NAME=$(git symbolic-ref --short HEAD 2>/dev/null)
echo -e "${GREEN}Switched to branch: ${BOLD}$BRANCH_NAME${NC}"

# Function to check if a file has changed between branches
has_file_changed() {
    local FILE="$1"
    if [ "$PREVIOUS_HEAD" = "0000000000000000000000000000000000000000" ]; then
        # This is a new clone, so consider everything as changed
        return 0
    else
        if git diff --name-only "$PREVIOUS_HEAD" "$NEW_HEAD" | grep -q "^$FILE$"; then
            return 0
        else
            return 1
        fi
    fi
}

# Check if pom.xml has changed - might need dependency updates
if has_file_changed "pom.xml"; then
    echo -e "${YELLOW}‚ö†Ô∏è pom.xml has changed. You may need to update dependencies.${NC}"
    echo -e "   Consider running: ${BOLD}./run.sh verify${NC}"
fi

# Check if there are new configuration files
if has_file_changed "src/main/resources/application.yaml" || \
   has_file_changed "src/main/resources/application.properties" || \
   has_file_changed ".env.example"; then
    echo -e "${YELLOW}‚ö†Ô∏è Configuration files have changed. Update your local settings if needed.${NC}"
    echo -e "   Check ${BOLD}.env.example${NC} for new environment variables."
fi

# Check if database migration scripts have been added
if git diff --name-only "$PREVIOUS_HEAD" "$NEW_HEAD" | grep -q "src/main/resources/db/migration/"; then
    echo -e "${YELLOW}‚ö†Ô∏è Database migration scripts have changed. You may need to rebuild your database.${NC}"
    echo -e "   Consider running: ${BOLD}./run.sh db restart${NC}"
fi

# Check branch type and suggest relevant actions
if [[ "$BRANCH_NAME" == feature/* ]]; then
    echo -e "${BLUE}üìå Working on feature branch. Remember to:${NC}"
    echo -e "   - Keep commits focused and follow conventional commits"
    echo -e "   - Add/update tests for new functionality"
    echo -e "   - Run ${BOLD}./run.sh quality${NC} before creating a PR"
elif [[ "$BRANCH_NAME" == fix/* ]]; then
    echo -e "${BLUE}üìå Working on bugfix branch. Remember to:${NC}"
    echo -e "   - Add a test case that reproduces the bug"
    echo -e "   - Run ${BOLD}./run.sh verify${NC} to ensure everything works"
elif [[ "$BRANCH_NAME" == "develop" ]]; then
    echo -e "${BLUE}üìå On develop branch. This branch is for integration.${NC}"
    echo -e "   - Consider running ${BOLD}./run.sh test${NC} to verify the build"
elif [[ "$BRANCH_NAME" == "main" || "$BRANCH_NAME" == "master" ]]; then
    echo -e "${BLUE}üìå On $BRANCH_NAME branch. This is the production branch.${NC}"
    echo -e "   - Be careful with direct commits here!"
    echo -e "   - Consider running ${BOLD}./run.sh test-env${NC} to verify everything"
fi

echo -e "${GREEN}‚úÖ Post-checkout tasks completed.${NC}"
exit 0 