#!/bin/sh

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

# Get the commit message (first argument given to the script)
COMMIT_MSG_FILE=$1
COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")

# Define the pattern for conventional commits
# Format: type(scope): subject
# Types: feat, fix, docs, style, refactor, perf, test, build, ci, chore, revert
PATTERN="^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\([a-z0-9-]+\))?: .{1,100}"

# Check if the commit message matches the pattern
if ! echo "$COMMIT_MSG" | grep -qE "$PATTERN"; then
    echo "${RED}ERROR: Commit message format is invalid.${NC}"
    echo "${YELLOW}Please use the conventional commit format:${NC}"
    echo "${GREEN}  type(scope): subject${NC}"
    echo ""
    echo "${YELLOW}Example: ${GREEN}feat(user): add login functionality${NC}"
    echo "${YELLOW}Example: ${GREEN}fix(auth): resolve token validation issue${NC}"
    echo ""
    echo "${YELLOW}Valid types are:${NC} feat, fix, docs, style, refactor, perf, test, build, ci, chore, revert"
    echo "${YELLOW}The scope is optional but encouraged.${NC}"
    echo "${YELLOW}The subject should be no more than 100 characters.${NC}"
    exit 1
fi

# Success
echo "${GREEN}Commit message format is valid.${NC}"
exit 0 