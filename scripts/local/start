#!/usr/bin/env bash

# Get the project root directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"

# Default values
ENV_FILE="$PROJECT_ROOT/.env"
COMPOSE_FILE="$PROJECT_ROOT/docker/docker-compose.local.yaml"
DEVTOOLS_CONTAINER="hiresync-devtools"
DB_CONTAINER="hiresync-postgres"

echo "====== Starting HireSync (Local Development) ======"

# Check Docker installation
echo "[INFO] Checking Docker installation"
if ! command -v docker &> /dev/null; then
  echo "[ERROR] Docker is not installed"
  exit 1
fi

if ! docker info &> /dev/null; then
  echo "[ERROR] Docker daemon is not running"
  exit 1
fi

# Check Docker Compose installation
echo "[INFO] Checking Docker Compose installation"
if ! docker compose version &> /dev/null; then
  echo "[ERROR] Docker Compose is required to run HireSync"
  exit 1
fi

# Check for docker-compose file
if [ ! -f "$COMPOSE_FILE" ]; then
  echo "[ERROR] Docker Compose file not found at: $COMPOSE_FILE"
  exit 1
fi

# Load environment variables
echo "[INFO] Loading environment variables from $ENV_FILE"
if [ ! -f "$ENV_FILE" ]; then
  echo "[ERROR] Environment file not found: $ENV_FILE"
  exit 1
fi

# Export variables from .env file
while IFS='=' read -r key value || [ -n "$key" ]; do
  # Skip comments and empty lines
  if [[ $key && ! $key =~ ^# ]]; then
    # Remove leading/trailing whitespace
    key=$(echo "$key" | xargs)
    value=$(echo "$value" | xargs)
    
    # Remove quotes if present
    value="${value%\"}"
    value="${value#\"}"
    value="${value%\'}"
    value="${value#\'}"
    
    # Export the variable
    export "$key=$value"
  fi
done < "$ENV_FILE"

# Start or restart services
echo "[INFO] Starting Docker services"
if ! docker compose -f "$COMPOSE_FILE" up -d; then
  echo "[ERROR] Failed to start Docker services"
  exit 1
fi

# Wait for database to be healthy
echo "[INFO] Waiting for database to be ready"
max_attempts=60
attempt=0
while [ $attempt -lt $max_attempts ]; do
  health=$(docker inspect --format="{{.State.Health.Status}}" "$DB_CONTAINER" 2>/dev/null)
  
  if [ "$health" = "healthy" ]; then
    echo "[INFO] Database is ready"
    break
  fi
  
  attempt=$((attempt + 1))
  echo "[INFO] Waiting for database to be ready... ($attempt/$max_attempts)"
  sleep 1
  
  if [ $attempt -eq $max_attempts ]; then
    echo "[WARNING] Database container not reporting as healthy after $max_attempts seconds"
    # Continue anyway, might be a healthcheck issue
  fi
done

# Execute spring-boot:run in the devtools container
echo "[INFO] Starting Spring Boot application in $DEVTOOLS_CONTAINER container"
if docker exec -it "$DEVTOOLS_CONTAINER" \
  mvn spring-boot:run \
  -Dspring-boot.run.profiles=local \
  -Dspring-boot.run.jvmArguments="-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005"; then
  echo "[SUCCESS] Application started successfully"
else
  echo "[ERROR] Failed to start application"
  exit 1
fi

# Note: The script execution will pause here until the Maven command completes (i.e., until the app stops)

echo "[INFO] Application has stopped"
exit 0 
