#!/bin/bash
# HireSync Local Development Environment - Shutdown Script
# This script safely stops all components of the local development environment

# Set script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
LOG_DIR="$PROJECT_ROOT/logs"
LOG_FILE="$LOG_DIR/hiresync-stop-$(date +%Y%m%d-%H%M%S).log"
START_TIME=$(date +%s)

# Create logs directory if it doesn't exist
mkdir -p "$LOG_DIR"

# Define colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Logging functions
log() {
    local level=$1
    local message=$2
    local timestamp=$(date "+%Y-%m-%d %H:%M:%S")
    local elapsed=$(( $(date +%s) - START_TIME ))
    echo -e "[$timestamp] [$level] [${elapsed}s] $message" | tee -a "$LOG_FILE"
}

log_info() {
    log "INFO" "${CYAN}$1${NC}"
}

log_warning() {
    log "WARNING" "${YELLOW}$1${NC}"
}

log_error() {
    log "ERROR" "${RED}$1${NC}"
}

log_success() {
    log "SUCCESS" "${GREEN}$1${NC}"
}

log_step() {
    log "STEP" "${BOLD}${BLUE}$1${NC}"
}

# Load environment variables
load_env_variables() {
    log_step "LOADING ENVIRONMENT VARIABLES"
    
    local env_file="$PROJECT_ROOT/.env"
    if [ -f "$env_file" ]; then
        log_info "Found .env file at: $env_file"
        set -a
        source "$env_file"
        set +a
        log_success "Environment variables loaded successfully"
    else
        log_warning ".env file not found at: $env_file"
        log_info "Using default environment variables"
        
        # Set default values
        export DB_HOST=${DB_HOST:-localhost}
        export DB_PORT=${DB_PORT:-5544}
        export DB_NAME=${DB_NAME:-hiresync_db}
        export DB_USERNAME=${DB_USERNAME:-hiresync_user}
        export DB_PASSWORD=${DB_PASSWORD:-hiresync_password}
    fi
}

# Function to stop Docker containers
stop_docker_containers() {
    log_step "STOPPING DOCKER CONTAINERS"
    
    local compose_file="$PROJECT_ROOT/docker/docker-compose.local.yaml"
    
    if [ ! -f "$compose_file" ]; then
        log_error "Docker Compose file not found at: $compose_file"
        return 1
    fi
    
    log_info "Stopping all containers using docker-compose..."
    if docker-compose -f "$compose_file" down; then
        log_success "All containers stopped successfully"
    else
        log_warning "Error stopping containers with docker-compose, attempting manual shutdown..."
        
        # Fallback to manual container stop
        log_info "Attempting to stop containers manually..."
        
        # Find and stop the containers
        for container in "hiresync-devtools" "hiresync-postgres"; do
            if docker ps -q --filter "name=$container" | grep -q .; then
                log_info "Stopping container: $container"
                if docker stop "$container"; then
                    log_success "$container stopped successfully"
                    
                    # Also remove the container
                    log_info "Removing container: $container"
                    if docker rm "$container"; then
                        log_success "$container removed successfully"
                    else
                        log_warning "Failed to remove $container"
                    fi
                else
                    log_error "Failed to stop $container"
                    
                    # Try force removal
                    log_info "Attempting to force remove $container..."
                    if docker rm -f "$container"; then
                        log_success "$container force removed successfully"
                    else
                        log_error "Failed to force remove $container"
                        return 1
                    fi
                fi
            else
                log_info "$container is not running"
                
                # Check if container exists but is not running
                if docker ps -a -q --filter "name=$container" | grep -q .; then
                    log_info "Removing stopped container: $container"
                    if docker rm "$container"; then
                        log_success "Stopped $container removed successfully"
                    else
                        log_warning "Failed to remove stopped $container"
                    fi
                fi
            fi
        done
    fi
    
    # Double check that all HireSync containers are stopped and removed
    if docker ps -a -q --filter "name=hiresync" | grep -q .; then
        log_warning "Some HireSync containers are still present"
        docker ps -a --filter "name=hiresync"
        
        log_info "Force removing all remaining HireSync containers..."
        docker ps -a -q --filter "name=hiresync" | xargs -r docker rm -f
        log_success "All remaining containers have been removed"
    else
        log_success "No HireSync containers remain"
    fi
    
    return 0
}

# Function to clean up Docker resources
clean_docker_resources() {
    log_step "CLEANING UP DOCKER RESOURCES"
    
    # Check if we should remove volumes
    local remove_volumes=${REMOVE_VOLUMES:-false}
    
    if [ "$remove_volumes" = "true" ]; then
        log_warning "Removing volumes will delete all database data!"
        log_info "Removing PostgreSQL volume..."
        
        if docker volume rm hiresync-postgres-data 2>/dev/null; then
            log_success "PostgreSQL volume removed successfully"
        else
            log_warning "Failed to remove PostgreSQL volume (it might be in use)"
        fi
    else
        log_info "Keeping Docker volumes intact (use REMOVE_VOLUMES=true to delete)"
    fi
    
    return 0
}

# Function to stop active processes on ports
stop_active_processes() {
    log_step "CHECKING FOR ACTIVE PROCESSES"
    
    local app_port=${PORT:-8080}
    
    log_info "Checking for processes using port $app_port..."
    
    # Different commands based on OS
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        local pid=$(lsof -t -i:$app_port 2>/dev/null)
        if [ -n "$pid" ]; then
            log_warning "Found process (PID: $pid) using port $app_port"
            log_info "Attempting to terminate process..."
            kill -15 $pid
            log_success "Sent termination signal to process"
        else
            log_info "No processes found using port $app_port"
        fi
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        local pid=$(lsof -t -i:$app_port 2>/dev/null)
        if [ -n "$pid" ]; then
            log_warning "Found process (PID: $pid) using port $app_port"
            log_info "Attempting to terminate process..."
            kill -15 $pid
            log_success "Sent termination signal to process"
        else
            log_info "No processes found using port $app_port"
        fi
    elif [[ "$OSTYPE" == "msys" ]] || [[ "$OSTYPE" == "win32" ]]; then
        log_info "Windows detected, skipping process termination"
        log_info "Please check if any Java processes need to be stopped manually"
    else
        log_warning "Unsupported OS for process checking: $OSTYPE"
    fi
    
    return 0
}

# Main function
main() {
    log_info "============================================================"
    log_info "${BOLD}STOPPING HIRESYNC LOCAL DEVELOPMENT ENVIRONMENT${NC}"
    log_info "============================================================"
    log_info "Date/Time: $(date)"
    log_info "User: $(whoami)"
    log_info "System: $(uname -a)"
    
    # Load environment variables
    load_env_variables
    
    # Stop active processes
    stop_active_processes
    
    # Stop Docker containers
    stop_docker_containers
    
    # Clean up Docker resources if requested
    clean_docker_resources
    
    # Calculate total execution time
    END_TIME=$(date +%s)
    TOTAL_TIME=$((END_TIME - START_TIME))
    
    log_success "Local environment shutdown completed in ${TOTAL_TIME} seconds"
    log_info "To start the environment again, run: ./scripts/run-local.sh"
    
    return 0
}

# Run the main function
main 