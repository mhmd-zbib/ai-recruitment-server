# HireSync Application Environment Configuration
# Copy this file to .env and adjust values as needed

#==============================================================================
# APPLICATION SETTINGS
#==============================================================================

# Application profile (dev, test, prod)
SPRING_PROFILES_ACTIVE=dev

# Application port for local development
APP_PORT=8080

# Time zone (UTC recommended for production)
TZ=UTC

#==============================================================================
# DATABASE CONFIGURATION
#==============================================================================

# Database connection
DB_HOST=localhost
DB_PORT=5432
DB_NAME=hiresync_db
DB_USERNAME=hiresync_user
DB_PASSWORD=hiresync_password

# Database roles
READ_PASSWORD=read_password
WRITE_PASSWORD=write_password

# Database backup settings
DB_BACKUP_DIR=./backups
DB_BACKUP_RETENTION=7

#==============================================================================
# DOCKER CONFIGURATION
#==============================================================================

# Docker image settings
IMAGE_NAME=hiresync
IMAGE_TAG=latest
REGISTRY=ghcr.io
REPO_OWNER=zbib

# Container resources
APP_REPLICAS=2
VOLUME_PREFIX=hiresync

# Docker paths
INIT_SCRIPTS_DIR=./db

#==============================================================================
# LOGGING CONFIGURATION
#==============================================================================

# Application logging
LOG_LEVEL=INFO
LOG_FILE_MAX_SIZE=10MB
LOG_FILE_MAX_HISTORY=7

#==============================================================================
# SECURITY SETTINGS
#==============================================================================

# JWT Configuration (generate with openssl rand -base64 48)
JWT_SECRET=change_this_to_a_secure_random_string_in_production
JWT_EXPIRATION=86400000

#==============================================================================
# DEBUGGING OPTIONS
#==============================================================================

# Remote debugging (dev only)
DEBUG_ENABLED=false
DEBUG_PORT=5005

# JVM options (add custom JVM options here)
JAVA_OPTS=-Xms256m -Xmx1024m -XX:+UseG1GC

#==============================================================================
# CI/CD CONFIGURATION
#==============================================================================

# SonarQube configuration
SONAR_HOST_URL=https://sonarcloud.io
SONAR_ORGANIZATION=your-organization
SONAR_PROJECT_KEY=your-project-key

# Maven options
MAVEN_OPTS=-Xmx512m -XX:+TieredCompilation -XX:TieredStopAtLevel=1

# ===== DATABASE POOL CONFIGURATION =====
DB_MAX_POOL_SIZE=10
DB_MIN_IDLE=5
DB_CONNECTION_TIMEOUT=30000
DB_IDLE_TIMEOUT=600000
DB_MAX_LIFETIME=1800000

# ===== JPA CONFIGURATION =====
# Use 'update' for development, 'validate' for production
JPA_DDL_AUTO=update

# ===== LOGGING LEVELS =====
LOG_LEVEL_ROOT=INFO
LOG_LEVEL_APP=DEBUG
LOG_LEVEL_SQL=DEBUG
LOG_LEVEL_SQL_PARAMS=TRACE

# ===== SWAGGER/API DOCS CONFIGURATION =====
SWAGGER_UI_ENABLED=true
SPRINGDOC_ENABLED=true

# ===== FILE STORAGE CONFIGURATION =====
# MinIO configuration (optional)
MINIO_HOST=localhost
MINIO_PORT=9000
MINIO_ACCESS_KEY=minioadmin
MINIO_SECRET_KEY=minioadmin
MINIO_BUCKET_NAME=hiresync
MINIO_ENABLED=false

# ===== MONITORING CONFIGURATION =====
# Enable Actuator endpoints (true for dev, false for prod)
ACTUATOR_DETAILED_HEALTH=true

# ===== SECURITY CONFIGURATION =====
# OWASP dependency check API key
NVD_API_KEY=

# ===== BUILD CONFIGURATION =====
# Skip tests during build
SKIP_TESTS=false
# Skip verification during deployment
SKIP_VERIFY=false

# ===== CI/CD CONFIGURATION =====
# These are typically set in CI/CD systems
SLACK_WEBHOOK=

# ===== ENVIRONMENT NOTES =====
# For local development with Docker:
# - Run ./connect-db.sh to automatically configure and start the application
# - PostgreSQL will be available at localhost:5544
#
# For development environment:
# - Run ./run-dev.sh to start PostgreSQL in Docker and run the application
#
# For production:
# - Run ./run-prod.sh after setting the JDBC_* environment variables
# - Or deploy with docker-compose.prod.yaml for a containerized setup 