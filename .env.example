# ===== DATABASE CONFIGURATION =====
# ------- LOCAL & DEV ENVIRONMENTS -------
# These settings are used with Docker PostgreSQL for local/dev
DB_HOST=localhost
DB_PORT=5544
DB_NAME=hiresync_db
DB_USERNAME=hiresync_user
DB_PASSWORD=hiresync_password

# ------- PRODUCTION ENVIRONMENT -------
# For production deployment, set these variables
# (For Render/Heroku, these are provided in their dashboard)
# JDBC_DATABASE_URL=jdbc:postgresql://your-production-db-host:5432/hiresync_db
# JDBC_DATABASE_USERNAME=prod_username
# JDBC_DATABASE_PASSWORD=prod_password

# ===== JWT CONFIGURATION =====
# Security key for JWT token generation and validation (keep this secret and secure!)
JWT_SECRET=your-jwt-secret-key-should-be-at-least-256-bits-long
# Token expiration time in milliseconds (24 hours = 86400000)
JWT_EXPIRATION=86400000

# ===== APPLICATION CONFIGURATION =====
# Port for the application to listen on (8080 is default)
PORT=8080
# Active profile: local, dev, or prod
SPRING_PROFILES_ACTIVE=local

# ===== DATABASE POOL CONFIGURATION =====
# Maximum number of connections in the pool
DB_MAX_POOL_SIZE=10
# Minimum number of idle connections maintained in the pool
DB_MIN_IDLE=5
# Connection timeout in milliseconds
DB_CONNECTION_TIMEOUT=30000
# Maximum connection lifetime in milliseconds
DB_MAX_LIFETIME=1800000

# ===== JPA CONFIGURATION =====
# DDL auto strategy: update, create, create-drop, validate, none
# Use 'update' for development, 'validate' for production
JPA_DDL_AUTO=update

# ===== LOGGING LEVELS =====
# Logging level for root logger
LOG_LEVEL_ROOT=INFO
# Logging level for application code
LOG_LEVEL_APP=INFO
# Logging level for SQL statements
LOG_LEVEL_SQL=INFO
# Logging level for SQL parameters
LOG_LEVEL_SQL_PARAMS=INFO

# ===== API DOCUMENTATION =====
# Whether to enable Swagger UI in production (true/false)
SWAGGER_UI_ENABLED=false
# Whether to enable OpenAPI docs in production (true/false)
SPRINGDOC_ENABLED=false

# ===== ENVIRONMENT NOTES =====
# For local development with Docker:
# - Run ./connect-db.sh to automatically configure and start the application
# - PostgreSQL will be available at localhost:5544
#
# For development environment:
# - Run ./run-dev.sh to start PostgreSQL in Docker and run the application
#
# For production:
# - Run ./run-prod.sh after setting the JDBC_* environment variables
# - Or deploy with docker-compose.prod.yaml for a containerized setup 