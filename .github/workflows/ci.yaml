name: CI Pipeline

on:
  push:
    branches: [master, dev]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [master, dev]
  workflow_dispatch:

# Status badge URLs:
# https://github.com/mhmd-zbib/ai-recruitment-server/actions/workflows/ci.yaml/badge.svg?branch=master
# https://github.com/mhmd-zbib/ai-recruitment-server/actions/workflows/ci.yaml/badge.svg?branch=dev

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DOCKER_IMAGE: hiresync
  DOCKER_REGISTRY: docker.io
  DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  SPRING_PROFILES_ACTIVE: test
  JWT_SECRET: ${{ secrets.JWT_TEST_SECRET || 'f5a8f9g6v4afetgasgbga2g4qwtoplju' }}
  JWT_ISSUER: hiresync-test
  JWT_AUDIENCE: hiresync-app-test
  DEBUG_MODE: true

jobs:
  lint:
    name: Linting and Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Run Checkstyle
        run: mvn checkstyle:check -P ci -Dpmd.skip=true

      - name: Run PMD
        run: mvn pmd:check -P ci

      - name: Run SpotBugs
        run: mvn spotbugs:check -P ci

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Run Unit Tests
        run: mvn test -P ci -Dtest=*Test

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results
          path: target/surefire-reports
          retention-days: 5

  build-jar:
    name: Build JAR
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: unit-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build JAR File
        run: mvn package -DskipTests -P ci

      - name: Upload JAR Artifact
        uses: actions/upload-artifact@v4
        with:
          name: application-jar
          path: target/*.jar
          retention-days: 1

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: build-jar
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download JAR Artifact
        uses: actions/download-artifact@v4
        with:
          name: application-jar
          path: target

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract branch or PR info
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "BUILD_TAG=pr-${{ github.event.pull_request.number }}-$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV
          else
            echo "BUILD_TAG=${GITHUB_REF#refs/heads/}-$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV
          fi

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          target: runtime
          push: false
          load: true
          tags: ${{ env.DOCKER_IMAGE }}:${{ env.BUILD_TAG }}
          platforms: linux/amd64
          build-args: |
            SPRING_PROFILES_ACTIVE=${{ env.SPRING_PROFILES_ACTIVE }}
            DEBUG_MODE=${{ env.DEBUG_MODE }}
            SPRINGDOC_ENABLED=true
            SWAGGER_UI_ENABLED=true
            SKIP_TESTS=true

      - name: Save Docker image
        run: |
          docker save ${{ env.DOCKER_IMAGE }}:${{ env.BUILD_TAG }} > image.tar

      - name: Upload Docker image
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: image.tar
          retention-days: 1

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: build-docker
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: .

      - name: Load Docker image
        run: |
          docker load < image.tar
          docker image ls

      - name: Run Integration Tests
        run: |
          # Run the integration tests using Docker Compose
          docker compose -f docker/docker-compose.test.yaml up \
            --abort-on-container-exit \
            --exit-code-from integration-tests \
            integration-tests test-db

      - name: Collect Test Results
        if: always()
        run: |
          echo "Collecting integration test results..."
          mkdir -p integration-test-results
          docker cp hiresync_integration_tests:/app/target/surefire-reports ./integration-test-results || true

          # Print summary of test results if available
          if [ -d "./integration-test-results" ]; then
            echo "Integration test results summary:"
            find ./integration-test-results -name "TEST-*.xml" -exec grep "testsuite" {} \; | head -n 5
          fi

      - name: Upload Integration Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: integration-test-results
          retention-days: 5

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: integration-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: .

      - name: Load Docker image
        run: |
          docker load < image.tar
          docker image ls

      - name: Run Application and E2E Tests
        run: |
          # Start the application and database
          docker compose -f docker/docker-compose.test.yaml up -d app-test test-db

          # Wait for the application to be ready
          echo "Waiting for application to be ready..."
          timeout 60s bash -c 'until curl -s http://localhost:8080/actuator/health | grep "UP"; do sleep 2; done'

          # Run some basic API tests
          echo "Running API tests..."
          curl -s http://localhost:8080/actuator/health | grep "UP"

          # Cleanup
          docker compose -f docker/docker-compose.test.yaml down

  push-docker:
    name: Push Docker Image
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: e2e-tests
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: .

      - name: Load Docker image
        run: |
          docker load < image.tar
          docker image ls

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract branch info and version
        shell: bash
        run: |
          BRANCH=${GITHUB_REF#refs/heads/}
          VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo 'v0.1.0')-$(echo ${{ github.sha }} | cut -c1-7)
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Tag and push Docker image
        run: |
          # Tag the image with version and branch
          docker tag ${{ env.DOCKER_IMAGE }}:${{ env.BUILD_TAG }} ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ env.VERSION }}
          docker tag ${{ env.DOCKER_IMAGE }}:${{ env.BUILD_TAG }} ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ env.BRANCH }}-latest

          # Push the images
          docker push ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ env.VERSION }}
          docker push ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ env.BRANCH }}-latest

          echo "âœ… Docker images pushed successfully:"
          echo "${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ env.VERSION }}"
          echo "${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ env.BRANCH }}-latest"
