name: CI Pipeline

on:
  push:
    branches: [ master, dev ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/*.md'
  pull_request:
    branches: [ master, dev ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/*.md'
  workflow_dispatch:  # Allow manual triggering

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true  # Cancel in-progress runs when a new workflow is triggered

env:
  DOCKER_IMAGE: hiresync
  DOCKER_TAG: ${{ github.sha }}
  CACHE_KEY_PREFIX: ${{ github.workflow }}
  SPRING_PROFILES_ACTIVE: test
  TZ: UTC
  LOG_LEVEL_ROOT: WARN
  LOG_LEVEL_APP: DEBUG
  LOG_LEVEL_SQL: DEBUG
  JWT_SECRET: ${{ secrets.JWT_TEST_SECRET || 'f5a8f9g6v4afetgasgbga2g4qwtoplju' }}
  JWT_ISSUER: hiresync-test
  JWT_EXPIRATION: 86400000
  JWT_REFRESH_EXPIRATION: 604800000
  SPRINGDOC_SWAGGER_UI_ENABLED: false
  SPRINGDOC_API_DOCS_ENABLED: false
  MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info
  MANAGEMENT_ENDPOINT_HEALTH_SHOW-DETAILS: never
  HIRESYNC_FEATURES_DEBUG-MODE: true

jobs:
  code-quality:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for code quality tools
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'
          
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ env.CACHE_KEY_PREFIX }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ env.CACHE_KEY_PREFIX }}-m2-
          
      - name: Run PMD Static Analysis
        run: mvn pmd:check -P ci
        
      - name: Run SpotBugs Analysis
        run: mvn spotbugs:check -P ci
        
      - name: Run OWASP Dependency Check
        run: mvn dependency-check:check -P ci
        
      - name: Run Checkstyle Validation
        run: mvn checkstyle:check -P ci

  unit-tests:
    needs: code-quality
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'
          
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ env.CACHE_KEY_PREFIX }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ env.CACHE_KEY_PREFIX }}-m2-
          
      - name: Run Unit Tests
        run: mvn test -P ci
        
      - name: Upload Test Results
        if: always()  # Upload even if tests fail
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: target/surefire-reports/
          retention-days: 5

  build:
    needs: unit-tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'
          
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ env.CACHE_KEY_PREFIX }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ env.CACHE_KEY_PREFIX }}-m2-
          
      - name: Build with Maven
        run: mvn clean package -P ci -DskipTests
        
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: application
          path: target/*.jar
          retention-days: 5

  docker-build:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download built artifact
        uses: actions/download-artifact@v4
        with:
          name: application
          path: target/
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Generate image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}
          tags: |
            type=sha,prefix=
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            latest
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}  # Don't push on PR
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:buildcache,mode=max
          platforms: linux/amd64,linux/arm64

  integration-tests:
    needs: docker-build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ env.CACHE_KEY_PREFIX }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ env.CACHE_KEY_PREFIX }}-m2-
      
      - name: Run Integration Tests
        run: |
          docker-compose -f docker/docker-compose.test.yaml up -d
          # Better wait strategy using health check
          echo "Waiting for services to be ready..."
          attempt=1
          max_attempts=10
          until $(curl --output /dev/null --silent --fail http://localhost:8080/actuator/health) || [ $attempt -gt $max_attempts ]; do
            echo "Waiting for application to be ready (attempt $attempt of $max_attempts)..."
            sleep 10
            attempt=$((attempt+1))
          done
          
          if [ $attempt -gt $max_attempts ]; then
            echo "Application failed to start in time. Checking logs:"
            docker-compose -f docker/docker-compose.test.yaml logs app
            exit 1
          fi
          
          mvn verify -P ci
      
      - name: Upload Integration Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: target/failsafe-reports/
          retention-days: 5
      
      - name: Stop services and clean up
        if: always()
        run: docker-compose -f docker/docker-compose.test.yaml down -v
