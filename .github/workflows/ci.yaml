name: Spring Boot CI Pipeline

on:
  push:
    branches: [ master, dev ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/*.md'
  pull_request:
    branches: [ master, dev ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/*.md'
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Run the build with tmate debugging enabled'
        required: false
        default: false
        type: boolean

# Permissions needed for GitHub Packages
permissions:
  contents: read
  packages: write

env:
  # Global environment variables
  JAVA_VERSION: '21'
  JAVA_DISTRIBUTION: 'temurin'
  MAVEN_OPTS: '-Xmx3072m -XX:+TieredCompilation -XX:TieredStopAtLevel=1'
  MAVEN_CLI_OPTS: '--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true'
  REGISTRY: ghcr.io
  IMAGE_NAME: hiresync
  DEFAULT_BRANCH: master

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate:
    name: Validate
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.changes.outputs.should_skip }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for accurate change detection

      - name: Check if workflow should be skipped
        id: changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            code:
              - 'src/**'
              - 'pom.xml'
              - 'settings.xml'
              - 'docker/**'
              - '.github/workflows/ci.yaml'
              - 'scripts/**'
              - 'config/**'
  
  quality:
    name: Code Quality
    needs: validate
    if: needs.validate.outputs.should_skip != 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: maven

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Set execute permissions on scripts
        run: |
          chmod +x ./scripts/core/*.sh
          chmod +x ./scripts/utils/*.sh
          chmod +x ./hiresync

      - name: Prepare CI environment
        run: ./scripts/core/ci-prepare.sh

      - name: Code linting and style check
        run: ./scripts/core/lint.sh

      - name: Static code analysis
        run: ./scripts/core/dependency-check.sh --format=XML
        continue-on-error: true

  build:
    name: Build & Package
    needs: quality
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: maven

      - name: Set execute permissions on scripts
        run: |
          chmod +x ./scripts/core/*.sh
          chmod +x ./scripts/utils/*.sh
          chmod +x ./hiresync

      - name: Build application
        id: build
        run: ./scripts/core/build-app.sh --skip-tests --profile=ci --no-container

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: spring-boot-app
          path: target/*.jar
          retention-days: 7
          if-no-files-found: error

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.actor }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,format=short
            type=raw,value=ci-latest
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', env.DEFAULT_BRANCH) }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          build-args: |
            SPRING_PROFILES_ACTIVE=test
            SKIP_TESTS=true

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  test:
    name: Tests
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [unit, integration]
        include:
          - test-type: unit
            profile: test
            use-container: true
          - test-type: integration
            profile: test
            use-container: true
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set execute permissions on scripts
        run: |
          chmod +x ./scripts/core/*.sh
          chmod +x ./scripts/utils/*.sh
          chmod +x ./hiresync

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Compose
        run: |
          # Setup docker compose v2
          DOCKER_COMPOSE_VERSION="v2.23.0"
          sudo curl -fL "https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-linux-x86_64" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version
          
          # Add test-runner service to docker-compose.test.yaml
          cat << EOF >> docker/docker-compose.test.yaml
  test-runner:
    image: ${{ env.REGISTRY }}/${{ github.actor }}/${{ env.IMAGE_NAME }}:ci-latest
    container_name: hiresync-test-runner
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: test
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/testdb
      SPRING_DATASOURCE_USERNAME: hiresync
      SPRING_DATASOURCE_PASSWORD: hiresync
    networks:
      - hiresync-test-network
EOF
          # Start the test environment
          docker-compose -f docker/docker-compose.test.yaml up -d

      - name: Run ${{ matrix.test-type }} tests
        run: |
          # Create test reports directory to ensure it exists for artifact upload
          mkdir -p target/surefire-reports
          mkdir -p target/failsafe-reports
          
          if [ "${{ matrix.test-type }}" = "unit" ]; then
            docker-compose -f docker/docker-compose.test.yaml exec -T test-runner /app/scripts/core/run-tests.sh --type=unit --profile=test --container
          else
            docker-compose -f docker/docker-compose.test.yaml exec -T test-runner /app/scripts/core/run-tests.sh --type=integration --profile=test --container
          fi
          
          # Copy test results from container to host
          docker cp hiresync-test-runner:/app/target/surefire-reports ./target/ || true
          docker cp hiresync-test-runner:/app/target/failsafe-reports ./target/ || true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            target/surefire-reports/
            target/failsafe-reports/
          retention-days: 7
          
      - name: Cleanup Docker environment
        if: always()
        run: docker-compose -f docker/docker-compose.test.yaml down -v

  publish:
    name: Publish Docker Image
    needs: [test, build]
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Tag CI image as release
        run: |
          docker pull ${{ env.REGISTRY }}/${{ github.actor }}/${{ env.IMAGE_NAME }}:ci-latest
          # Tag the CI image with a more permanent tag based on branch/release
          if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            docker tag ${{ env.REGISTRY }}/${{ github.actor }}/${{ env.IMAGE_NAME }}:ci-latest ${{ env.REGISTRY }}/${{ github.actor }}/${{ env.IMAGE_NAME }}:latest
            docker push ${{ env.REGISTRY }}/${{ github.actor }}/${{ env.IMAGE_NAME }}:latest
          elif [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            docker tag ${{ env.REGISTRY }}/${{ github.actor }}/${{ env.IMAGE_NAME }}:ci-latest ${{ env.REGISTRY }}/${{ github.actor }}/${{ env.IMAGE_NAME }}:dev
            docker push ${{ env.REGISTRY }}/${{ github.actor }}/${{ env.IMAGE_NAME }}:dev
          fi

  summary:
    name: Build Summary
    if: always()
    needs: [validate, quality, build, test, publish]
    runs-on: ubuntu-latest
    steps:
      - name: Build Status Report
        run: |
          echo "## Spring Boot CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Validation: ${{ needs.validate.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Code Quality: ${{ needs.quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build & Package: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Tests: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Publish: ${{ needs.publish.result || 'Skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Details" >> $GITHUB_STEP_SUMMARY
          echo "- Branch: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- Workflow ID: ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY 