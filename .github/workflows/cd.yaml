name: CD Pipeline

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed
    branches:
      - master
      - dev
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'prod'
        type: choice
        options: [prod]

# Status badge URLs:
# https://github.com/mhmd-zbib/ai-recruitment-server/actions/workflows/cd.yaml/badge.svg?branch=master
# https://github.com/mhmd-zbib/ai-recruitment-server/actions/workflows/cd.yaml/badge.svg?branch=dev

# Grant required permissions
permissions:
  contents: write    # Needed for creating releases
  packages: write    # Needed for GitHub Container Registry (ghcr.io)

env:
  APP_NAME: hiresync
  DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  # Production environment variables
  SPRING_PROFILES_ACTIVE: prod
  DEBUG_MODE: false
  SPRINGDOC_ENABLED: false
  SWAGGER_UI_ENABLED: false

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    environment: ${{ github.event.inputs.environment || 'prod' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.workflow_run.head_branch || github.ref }}
      
      - name: Debug Workflow Information
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Workflow run conclusion: ${{ github.event.workflow_run.conclusion }}"
          echo "Branch: ${{ github.event.workflow_run.head_branch || github.ref_name }}"
          echo "Repository owner: ${{ github.repository_owner }}"
          echo "Running CD workflow after successful CI"
      
      - name: Set version
        id: set-version
        run: |
          VERSION="$(git describe --tags --abbrev=0 2>/dev/null || echo 'v0.1.0')-$(git rev-parse --short HEAD)"
          BRANCH="${{ github.event.workflow_run.head_branch || github.ref_name }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION on branch: $BRANCH"
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and Push to Docker Hub
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_USERNAME }}/${{ env.APP_NAME }}:${{ steps.set-version.outputs.version }}
            ${{ env.DOCKER_USERNAME }}/${{ env.APP_NAME }}:${{ steps.set-version.outputs.branch }}-latest
          platforms: linux/amd64
          build-args: |
            SPRING_PROFILES_ACTIVE=${{ env.SPRING_PROFILES_ACTIVE }}
            DEBUG_MODE=${{ env.DEBUG_MODE }}
            SPRINGDOC_ENABLED=${{ env.SPRINGDOC_ENABLED }}
            SWAGGER_UI_ENABLED=${{ env.SWAGGER_UI_ENABLED }}
      
      - name: Verify Docker Hub Push
        run: |
          echo "Images pushed to Docker Hub:"
          echo "${{ env.DOCKER_USERNAME }}/${{ env.APP_NAME }}:${{ steps.set-version.outputs.version }}"
          echo "${{ env.DOCKER_USERNAME }}/${{ env.APP_NAME }}:${{ steps.set-version.outputs.branch }}-latest"
      
      # Deployment is handled by Render Auto-Deploy
      - name: Create Release
        if: success() && (steps.set-version.outputs.branch == 'master')
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.set-version.outputs.version }}
          name: Release ${{ steps.set-version.outputs.version }}
          body: |
            Release ${{ steps.set-version.outputs.version }}
            Deployed on $(date)
            
            This release has been built and published to Docker Hub.
            Deployment is handled automatically by Render.
          draft: false
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Notify Success
        run: |
          echo "ðŸš€ Successfully built and published ${{ env.APP_NAME }} ${{ steps.set-version.outputs.version }}"
          echo "Images available on Docker Hub"
          echo "Deployment will be handled by Render Auto-Deploy"
          echo "Branch: ${{ steps.set-version.outputs.branch }}"
          echo "Version: ${{ steps.set-version.outputs.version }}"
