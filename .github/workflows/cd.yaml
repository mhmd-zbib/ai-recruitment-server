name: CD Pipeline

on:
  push:
    branches: [master]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options: [staging, production]

env:
  APP_NAME: hiresync

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set version
        id: set-version
        run: |
          VERSION="$(git describe --tags --abbrev=0 2>/dev/null || echo 'v0.1.0')-$(git rev-parse --short HEAD)"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION"
      
      - name: Set deployment variables
        id: vars
        run: |
          ENV="${{ github.event.inputs.environment || 'staging' }}"
          echo "deploy_env=$ENV" >> $GITHUB_OUTPUT
          echo "is_prod=${{ github.event.inputs.environment == 'production' }}" >> $GITHUB_OUTPUT
          echo "Deploying to: $ENV"
      
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets[format('{0}_SSH_KEY', steps.vars.outputs.deploy_env == 'production' && 'PRODUCTION' || 'STAGING')] }}
      
      - name: Deploy
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          APP_VERSION: ${{ steps.set-version.outputs.version }}
          SSH_HOST: ${{ secrets[format('{0}_HOST', steps.vars.outputs.deploy_env == 'production' && 'PRODUCTION' || 'STAGING')] }}
          SSH_USER: ${{ secrets[format('{0}_USER', steps.vars.outputs.deploy_env == 'production' && 'PRODUCTION' || 'STAGING')] }}
          SSH_PORT: ${{ secrets[format('{0}_PORT', steps.vars.outputs.deploy_env == 'production' && 'PRODUCTION' || 'STAGING')] || '22' }}
          DB_USER: ${{ secrets[format('{0}_DB_USER', steps.vars.outputs.deploy_env == 'production' && 'PRODUCTION' || 'STAGING')] }}
          DB_PASSWORD: ${{ secrets[format('{0}_DB_PASSWORD', steps.vars.outputs.deploy_env == 'production' && 'PRODUCTION' || 'STAGING')] }}
          JWT_SECRET: ${{ secrets[format('{0}_JWT_SECRET', steps.vars.outputs.deploy_env == 'production' && 'PRODUCTION' || 'STAGING')] }}
          APPLY_INDEX_FIX: ${{ secrets.APPLY_INDEX_FIX || 'false' }}
          PROFILE: ${{ steps.vars.outputs.deploy_env == 'production' && 'prod' || 'staging' }}
          JWT_ISSUER: ${{ steps.vars.outputs.deploy_env == 'production' && 'hiresync' || 'hiresync-staging' }}
          JWT_AUDIENCE: ${{ steps.vars.outputs.deploy_env == 'production' && 'hiresync-app' || 'hiresync-app-staging' }}
        run: |
          echo "Deploying version $APP_VERSION to ${{ steps.vars.outputs.deploy_env }}"
          
          # Prep deployment
          ssh -o StrictHostKeyChecking=no -p $SSH_PORT $SSH_USER@$SSH_HOST "mkdir -p ~/deployments/$APP_NAME"
          scp -o StrictHostKeyChecking=no -P $SSH_PORT scripts/deploy-prod.sh $SSH_USER@$SSH_HOST:~/deployments/$APP_NAME/deploy.sh
          scp -o StrictHostKeyChecking=no -P $SSH_PORT docker/docker-compose.prod.yaml $SSH_USER@$SSH_HOST:~/deployments/$APP_NAME/docker-compose.yaml
          ssh -o StrictHostKeyChecking=no -p $SSH_PORT $SSH_USER@$SSH_HOST "chmod +x ~/deployments/$APP_NAME/deploy.sh"
          
          # Create .env file
          ssh -o StrictHostKeyChecking=no -p $SSH_PORT $SSH_USER@$SSH_HOST "cat > ~/deployments/$APP_NAME/.env" << EOF
          DOCKER_IMAGE=$DOCKER_USERNAME/$APP_NAME
          DOCKER_TAG=$APP_VERSION
          POSTGRES_DB=hiresync
          POSTGRES_USER=$DB_USER
          POSTGRES_PASSWORD=$DB_PASSWORD
          SPRING_PROFILES_ACTIVE=$PROFILE
          SPRING_DATASOURCE_USERNAME=$DB_USER
          SPRING_DATASOURCE_PASSWORD=$DB_PASSWORD
          JWT_SECRET=$JWT_SECRET
          JWT_ISSUER=$JWT_ISSUER
          JWT_AUDIENCE=$JWT_AUDIENCE
          APPLY_INDEX_FIX=$APPLY_INDEX_FIX
          EOF
          
          # Run deployment
          ssh -o StrictHostKeyChecking=no -p $SSH_PORT $SSH_USER@$SSH_HOST "cd ~/deployments/$APP_NAME && ./deploy.sh"
      
      - name: Verify Deployment
        env:
          SSH_HOST: ${{ secrets[format('{0}_HOST', steps.vars.outputs.deploy_env == 'production' && 'PRODUCTION' || 'STAGING')] }}
          SSH_USER: ${{ secrets[format('{0}_USER', steps.vars.outputs.deploy_env == 'production' && 'PRODUCTION' || 'STAGING')] }}
          SSH_PORT: ${{ secrets[format('{0}_PORT', steps.vars.outputs.deploy_env == 'production' && 'PRODUCTION' || 'STAGING')] || '22' }}
        run: |
          for i in {1..12}; do
            if ssh -o StrictHostKeyChecking=no -p $SSH_PORT $SSH_USER@$SSH_HOST "curl -s http://localhost:8080/actuator/health | grep -q 'UP'"; then
              echo "✅ ${{ steps.vars.outputs.deploy_env }} deployment successful!"
              break
            fi
            
            if [ $i -eq 12 ]; then
              echo "❌ Application failed to start in time"
              exit 1
            fi
            
            echo "Waiting for application to be ready (attempt $i of 12)..."
            sleep 10
          done
      
      - name: Create Release
        if: steps.vars.outputs.is_prod == 'true'
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.set-version.outputs.version }}
          name: Release ${{ steps.set-version.outputs.version }}
          body: |
            Release ${{ steps.set-version.outputs.version }}
            Deployed to production on $(date)
          draft: false
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Notify Success
        if: success()
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "text": "${{ steps.vars.outputs.is_prod == 'true' && '🚀' || '✅' }} Successfully deployed ${{ env.APP_NAME }} v${{ steps.set-version.outputs.version }} to ${{ steps.vars.outputs.deploy_env }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ steps.vars.outputs.is_prod == 'true' && '🚀' || '✅' }} Successfully deployed *${{ env.APP_NAME }}* to ${{ steps.vars.outputs.deploy_env }}"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Version:*\n${{ steps.set-version.outputs.version }}"
                    },
                    {
                      "type": "mrkdwn", 
                      "text": "*Deployed by:*\n${{ github.actor }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets[format('{0}_WEBHOOK_{1}', 'SLACK', steps.vars.outputs.deploy_env == 'production' && 'PRODUCTION' || 'STAGING')] }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK 