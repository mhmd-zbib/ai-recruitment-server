name: CD Pipeline

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed
    branches:
      - master
      - dev
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options: [dev, prod]

env:
  APP_NAME: hiresync
  DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}

jobs:
  prepare:
    runs-on: ubuntu-latest
    if: |
      (github.event.workflow_run.conclusion == 'success') || 
      (github.event_name == 'workflow_dispatch')
    outputs:
      version: ${{ steps.set-version.outputs.version }}
      deploy_env: ${{ steps.vars.outputs.deploy_env }}
      image_tag: ${{ steps.vars.outputs.image_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.workflow_run.head_branch || github.ref }}
      
      - name: Set version
        id: set-version
        run: |
          VERSION="$(git describe --tags --abbrev=0 2>/dev/null || echo 'v0.1.0')-$(git rev-parse --short HEAD)"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION"
      
      - name: Set deployment variables
        id: vars
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENV="${{ github.event.inputs.environment }}"
          elif [[ "${{ github.event.workflow_run.head_branch || github.ref_name }}" == "master" ]]; then
            ENV="prod"
          else
            ENV="dev"
          fi
          
          IMAGE_TAG="${{ env.DOCKER_USERNAME }}/${{ env.APP_NAME }}:$VERSION"
          
          echo "deploy_env=$ENV" >> $GITHUB_OUTPUT
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "Deploying to: $ENV environment"
          echo "Using image tag: $IMAGE_TAG"

  deploy-dev:
    needs: prepare
    if: needs.prepare.outputs.deploy_env == 'dev'
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DEV_SSH_PRIVATE_KEY }}
          
      - name: Setup known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -t rsa ${{ secrets.DEV_SERVER_HOST }} >> ~/.ssh/known_hosts
          
      - name: Deploy to Digital Ocean
        run: |
          ssh ${{ secrets.DEV_SSH_USER }}@${{ secrets.DEV_SERVER_HOST }} << 'EOF'
            cd /opt/hiresync
            
            # Pull latest docker-compose file if needed
            git pull origin dev
            
            # Login to DockerHub
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
            
            # Pull latest image
            docker pull ${{ needs.prepare.outputs.image_tag }}
            
            # Create .env file from secrets
            cat > .env << 'EOT'
            SPRING_PROFILES_ACTIVE=dev
            APP_PORT=${{ secrets.DEV_APP_PORT }}
            DB_HOST=${{ secrets.DEV_DB_HOST }}
            DB_NAME=${{ secrets.DEV_DB_NAME }}
            DB_USER=${{ secrets.DEV_DB_USER }}
            DB_PASSWORD=${{ secrets.DEV_DB_PASSWORD }}
            JWT_SECRET=${{ secrets.DEV_JWT_SECRET }}
            JWT_EXPIRATION=${{ secrets.DEV_JWT_EXPIRATION }}
            LOG_LEVEL_ROOT=INFO
            LOG_LEVEL_APP=DEBUG
            ACTUATOR_DETAILED_HEALTH=true
            EOT
            
            # Update the image tag in docker-compose file
            sed -i "s|image:.*|image: ${{ needs.prepare.outputs.image_tag }}|g" docker-compose.dev.yaml
            
            # Deploy with docker-compose
            docker-compose -f docker-compose.dev.yaml down
            docker-compose -f docker-compose.dev.yaml up -d
            
            # Clean up old images
            docker system prune -af --volumes
          EOF
          
      - name: Verify Deployment
        run: |
          echo "âœ… Deployment to dev environment completed successfully!"
          echo "The application is now available at: https://${{ secrets.DEV_APP_URL }}"
      
      - name: Notify Success
        if: success()
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "text": "âœ… Successfully deployed ${{ env.APP_NAME }} to dev environment",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "âœ… Successfully deployed *${{ env.APP_NAME }}* to dev environment"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Version:*\n${{ needs.prepare.outputs.version }}"
                    },
                    {
                      "type": "mrkdwn", 
                      "text": "*Deployed by:*\n${{ github.actor }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_DEV }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

  deploy-prod:
    needs: prepare
    if: needs.prepare.outputs.deploy_env == 'prod'
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to AWS EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_SERVER_HOST }}
          username: ${{ secrets.PROD_SSH_USER }}
          key: ${{ secrets.PROD_SSH_PRIVATE_KEY }}
          script: |
            cd /opt/hiresync
            
            # Pull latest docker-compose file if needed
            git pull origin master
            
            # Login to DockerHub
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
            
            # Pull latest image
            docker pull ${{ needs.prepare.outputs.image_tag }}
            
            # Create .env file from secrets
            cat > .env << 'EOT'
            SPRING_PROFILES_ACTIVE=prod
            APP_PORT=${{ secrets.PROD_APP_PORT }}
            DB_HOST=${{ secrets.PROD_DB_HOST }}
            DB_NAME=${{ secrets.PROD_DB_NAME }}
            DB_USER=${{ secrets.PROD_DB_USER }}
            DB_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}
            JWT_SECRET=${{ secrets.PROD_JWT_SECRET }}
            JWT_EXPIRATION=${{ secrets.PROD_JWT_EXPIRATION }}
            LOG_LEVEL_ROOT=INFO
            LOG_LEVEL_APP=INFO
            ACTUATOR_DETAILED_HEALTH=false
            EOT
            
            # Update the image tag in docker-compose file
            sed -i "s|image:.*|image: ${{ needs.prepare.outputs.image_tag }}|g" docker-compose.prod.yaml
            
            # Deploy with docker-compose
            docker-compose -f docker-compose.prod.yaml down
            docker-compose -f docker-compose.prod.yaml up -d
            
            # Clean up old images (keep last 3)
            docker image prune -a --filter "until=72h" -f
            
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.prepare.outputs.version }}
          name: Release ${{ needs.prepare.outputs.version }}
          body: |
            Release ${{ needs.prepare.outputs.version }}
            Deployed to production on $(date)
          draft: false
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Verify Deployment
        run: |
          echo "ðŸš€ Deployment to production environment completed successfully!"
          echo "The application is now available at: https://${{ secrets.PROD_APP_URL }}"
      
      - name: Notify Success
        if: success()
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "text": "ðŸš€ Successfully deployed ${{ env.APP_NAME }} to production",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "ðŸš€ Successfully deployed *${{ env.APP_NAME }}* to production"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Version:*\n${{ needs.prepare.outputs.version }}"
                    },
                    {
                      "type": "mrkdwn", 
                      "text": "*Deployed by:*\n${{ github.actor }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_PROD }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
