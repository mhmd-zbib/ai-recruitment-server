name: CD Pipeline

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed
    branches:
      - master
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'prod'
        type: choice
        options: [prod]

env:
  APP_NAME: hiresync
  DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}

jobs:
  prepare:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    outputs:
      version: ${{ steps.set-version.outputs.version }}
      image_tag: ${{ steps.vars.outputs.image_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.workflow_run.head_branch || github.ref }}
      
      - name: Set version
        id: set-version
        run: |
          VERSION="$(git describe --tags --abbrev=0 2>/dev/null || echo 'v0.1.0')-$(git rev-parse --short HEAD)"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION"
      
      - name: Set deployment variables
        id: vars
        run: |
          IMAGE_TAG="${{ env.DOCKER_USERNAME }}/${{ env.APP_NAME }}:$VERSION"
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "Using image tag: $IMAGE_TAG"

      # Only build and push Docker image in workflow_dispatch - CI pipeline already builds it
      - name: Set up Docker Buildx
        if: github.event_name == 'workflow_dispatch'
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        if: github.event_name == 'workflow_dispatch'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push Docker image
        if: github.event_name == 'workflow_dispatch'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ steps.vars.outputs.image_tag }},${{ env.DOCKER_USERNAME }}/${{ env.APP_NAME }}:latest
          platforms: linux/amd64

  deploy:
    needs: prepare
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to Production
        run: |
          echo "Deploying to Production Environment"
          echo "Image: ${{ needs.prepare.outputs.image_tag }}"
          echo "This is a placeholder for the actual deployment step"
            
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.prepare.outputs.version }}
          name: Release ${{ needs.prepare.outputs.version }}
          body: |
            Release ${{ needs.prepare.outputs.version }}
            Deployed to production on $(date)
          draft: false
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Verify Deployment
        run: |
          echo "ðŸš€ Production deployment completed successfully!"
          echo "The application is now available at your production domain"
      
      - name: Notify Success
        run: |
          echo "ðŸš€ Successfully deployed ${{ env.APP_NAME }} to production"
          echo "Version: ${{ needs.prepare.outputs.version }}"
          echo "Deployed by: ${{ github.actor }}"
