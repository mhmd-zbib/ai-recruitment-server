name: CD Pipeline

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed
    branches:
      - master
      - dev
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'prod'
        type: choice
        options: [prod]

# Status badge URLs:
# https://github.com/mhmd-zbib/ai-recruitment-server/actions/workflows/cd.yaml/badge.svg?branch=master
# https://github.com/mhmd-zbib/ai-recruitment-server/actions/workflows/cd.yaml/badge.svg?branch=dev

env:
  APP_NAME: hiresync
  DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  REGISTRY: ghcr.io
  REPO_OWNER: zbib

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    environment: ${{ github.event.inputs.environment || 'prod' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.workflow_run.head_branch || github.ref }}
      
      - name: Set version
        id: set-version
        run: |
          VERSION="$(git describe --tags --abbrev=0 2>/dev/null || echo 'v0.1.0')-$(git rev-parse --short HEAD)"
          BRANCH="${{ github.event.workflow_run.head_branch || github.ref_name }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION on branch: $BRANCH"
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Images
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPO_OWNER }}/${{ env.APP_NAME }}:${{ steps.set-version.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.REPO_OWNER }}/${{ env.APP_NAME }}:${{ steps.set-version.outputs.branch }}-latest
            ${{ env.DOCKER_USERNAME }}/${{ env.APP_NAME }}:${{ steps.set-version.outputs.version }}
            ${{ env.DOCKER_USERNAME }}/${{ env.APP_NAME }}:${{ steps.set-version.outputs.branch }}-latest
          platforms: linux/amd64

      - name: Deploy to Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd ${{ secrets.APP_DIRECTORY }}
            export REGISTRY=${{ env.REGISTRY }}
            export REPO_OWNER=${{ env.REPO_OWNER }}
            export IMAGE_NAME=${{ env.APP_NAME }}
            export IMAGE_TAG=${{ steps.set-version.outputs.version }}
            export JDBC_DATABASE_URL="${{ secrets.JDBC_DATABASE_URL }}"
            export DB_USER="${{ secrets.DB_USER }}"
            export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
            export SPRING_PROFILES_ACTIVE=prod
            
            echo "Pulling latest image from registry..."
            docker compose -f docker/docker-compose.prod.yaml pull app
            
            echo "Deploying application..."
            docker compose -f docker/docker-compose.prod.yaml up -d --force-recreate app
            
            echo "Cleanup old containers and images..."
            docker system prune -af --volumes
      
      - name: Create Release
        if: github.ref == 'refs/heads/master'
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.set-version.outputs.version }}
          name: Release ${{ steps.set-version.outputs.version }}
          body: |
            Release ${{ steps.set-version.outputs.version }}
            Deployed to production on $(date)
          draft: false
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Notify Success
        run: |
          echo "ðŸš€ Successfully deployed ${{ env.APP_NAME }} to ${{ github.event.inputs.environment || 'production' }}"
          echo "Version: ${{ steps.set-version.outputs.version }}"
          echo "Deployed by: ${{ github.actor }}"
