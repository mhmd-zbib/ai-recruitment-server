name: Main Branch CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  validate:
    name: Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
          
      - name: Check code style
        run: mvn checkstyle:check -Dcheckstyle.skip=false
        
      - name: Run static code analysis
        run: mvn pmd:check spotbugs:check

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
          
      - name: Run OWASP Dependency Check
        run: mvn org.owasp:dependency-check-maven:check
        
      - name: Upload OWASP report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: owasp-report
          path: target/dependency-check-report.html
          
  test:
    name: Test
    needs: security-scan
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: hiresync_test
          POSTGRES_USER: hiresync_user
          POSTGRES_PASSWORD: hiresync_password
        ports:
          - 5544:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
          
      - name: Run tests with coverage
        run: mvn test jacoco:report
        env:
          DB_HOST: localhost
          DB_PORT: 5544
          DB_NAME: hiresync_test
          DB_USERNAME: hiresync_user
          DB_PASSWORD: hiresync_password
          SPRING_PROFILES_ACTIVE: test
          
      - name: Generate test report
        if: always()
        run: mvn surefire-report:report-only
        
      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            target/site/
            target/jacoco-report/
          retention-days: 30

  build:
    name: Build and Package
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
          
      - name: Build package
        run: mvn package -DskipTests
        
      - name: Upload JAR
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar
          retention-days: 7

  build-and-push:
    name: Build and Push Docker Image
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            latest
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Scan image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/${{ github.repository }}:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-to-render:
    name: Deploy to Production
    needs: build-and-push
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Deploy to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_PROD_SERVICE_ID }}
        run: |
          curl -X POST \
            "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys" \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json"
            
      - name: Verify Deployment
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_PROD_SERVICE_ID }}
        run: |
          echo "Waiting for deployment to start..."
          sleep 30
          
          MAX_ATTEMPTS=20
          ATTEMPT=1
          DEPLOYED=false
          
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "Checking deployment status (attempt $ATTEMPT/$MAX_ATTEMPTS)..."
            DEPLOY_STATUS=$(curl -s -H "Authorization: Bearer $RENDER_API_KEY" \
              "https://api.render.com/v1/services/$RENDER_SERVICE_ID" | \
              grep -o '"status":"[^"]*"' | cut -d'"' -f4)
              
            if [ "$DEPLOY_STATUS" == "live" ]; then
              DEPLOYED=true
              break
            fi
            
            echo "Deployment status: $DEPLOY_STATUS. Waiting 30 seconds..."
            sleep 30
            ATTEMPT=$((ATTEMPT+1))
          done
          
          if [ "$DEPLOYED" == "true" ]; then
            echo "Deployment successful!"
            exit 0
          else
            echo "Deployment timed out or failed."
            exit 1
          fi
          
  notify:
    name: Send Notification
    needs: deploy-to-render
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Notify Slack
        if: ${{ secrets.SLACK_WEBHOOK_URL != '' }}
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
      - name: Create GitHub Release
        if: github.event_name != 'pull_request' && success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: release-${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          body: |
            Production deployment from main branch - ${{ github.sha }}
            Deployed at: ${{ github.event.repository.updated_at }} 