name: CD Pipeline

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      version:
        description: 'Override version'
        required: false
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  JAVA_VERSION: '17'
  JAVA_DISTRIBUTION: 'temurin'
  MAVEN_OPTS: '-Xmx512m -XX:+TieredCompilation -XX:TieredStopAtLevel=1'

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: maven
      
      - name: Determine version
        id: version
        run: |
          # Use explicit version from workflow input if provided
          if [[ -n "${{ github.event.inputs.version }}" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          # Use tag name if this is a tag push
          elif [[ "${{ github.ref_type }}" == "tag" ]]; then
            VERSION="${{ github.ref_name }}"
          # For main/master branch pushes, use current date with commit SHA
          else
            VERSION="$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"
      
      - name: Make scripts executable
        run: |
          chmod +x ./mvnw
          find ./docker -name "*.sh" -type f -exec chmod +x {} \;
      
      - name: Build with Maven
        run: |
          ./mvnw -B package -Drevision=${{ steps.version.outputs.version }}
      
      - name: Run tests
        run: ./mvnw test
      
      - name: Archive artifacts
        uses: actions/upload-artifact@v3
        with:
          name: app-artifacts
          path: target/*.jar
          retention-days: 5

  docker-build:
    name: Build and Push Docker Image
    needs: [build]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Download JAR artifact
        uses: actions/download-artifact@v3
        with:
          name: app-artifacts
          path: target
      
      - name: Login to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ needs.build.outputs.version }}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.build.outputs.version }}
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            VCS_REF=${{ github.sha }}
            SPRING_PROFILES_ACTIVE=prod

  deploy-staging:
    name: Deploy to Staging
    needs: [build, docker-build]
    if: |
      github.event_name == 'push' || 
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.STAGING_SSH_KEY }}
      
      - name: Copy deployment files
        run: |
          mkdir -p deploy
          cp docker/docker-compose.yaml deploy/
          cp docker/docker-compose.prod.yaml deploy/
          cp .env.example deploy/.env
          
          # Update .env file with secrets
          sed -i "s/DB_PASSWORD=.*/DB_PASSWORD=${{ secrets.DB_PASSWORD }}/" deploy/.env
          sed -i "s/SPRING_PROFILES_ACTIVE=.*/SPRING_PROFILES_ACTIVE=prod/" deploy/.env
          sed -i "s/IMAGE_TAG=.*/IMAGE_TAG=${{ needs.build.outputs.version }}/" deploy/.env
          sed -i "s/JWT_SECRET=.*/JWT_SECRET=${{ secrets.JWT_SECRET }}/" deploy/.env
      
      - name: Deploy to staging server
        run: |
          # Add host key
          ssh-keyscan -H ${{ secrets.STAGING_HOST }} >> ~/.ssh/known_hosts
          
          # Create directory if it doesn't exist
          ssh ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} "mkdir -p ~/hiresync"
          
          # Copy deployment files
          scp -r deploy/* ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }}:~/hiresync/
          
          # Pull and start the application
          ssh ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} "cd ~/hiresync && \
            echo 'Pulling latest image...' && \
            docker login ${{ env.REGISTRY }} -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }} && \
            docker-compose -f docker-compose.yaml -f docker-compose.prod.yaml pull && \
            echo 'Starting application...' && \
            docker-compose -f docker-compose.yaml -f docker-compose.prod.yaml up -d && \
            echo 'Deployment completed!'"
      
      - name: Verify deployment
        run: |
          echo "Waiting for application to start..."
          sleep 30
          curl --retry 5 --retry-delay 10 -s http://${{ secrets.STAGING_HOST }}:8080/actuator/health | grep '"status":"UP"'
          if [ $? -eq 0 ]; then
            echo "Deployment successful! Application is running."
          else
            echo "Deployment verification failed. Check logs for details."
            exit 1
          fi

  deploy-production:
    name: Deploy to Production
    needs: [build, docker-build, deploy-staging]
    if: |
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) || 
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}
      
      - name: Copy deployment files
        run: |
          mkdir -p deploy
          cp docker/docker-compose.yaml deploy/
          cp docker/docker-compose.prod.yaml deploy/
          cp .env.example deploy/.env
          
          # Update .env file with secrets
          sed -i "s/DB_PASSWORD=.*/DB_PASSWORD=${{ secrets.DB_PASSWORD }}/" deploy/.env
          sed -i "s/SPRING_PROFILES_ACTIVE=.*/SPRING_PROFILES_ACTIVE=prod/" deploy/.env
          sed -i "s/IMAGE_TAG=.*/IMAGE_TAG=${{ needs.build.outputs.version }}/" deploy/.env
          sed -i "s/JWT_SECRET=.*/JWT_SECRET=${{ secrets.JWT_SECRET }}/" deploy/.env
      
      - name: Deploy to production server
        run: |
          # Add host key
          ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts
          
          # Create directory if it doesn't exist
          ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} "mkdir -p ~/hiresync"
          
          # Copy deployment files
          scp -r deploy/* ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }}:~/hiresync/
          
          # Pull and start the application with zero downtime update
          ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} "cd ~/hiresync && \
            echo 'Pulling latest image...' && \
            docker login ${{ env.REGISTRY }} -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }} && \
            docker-compose -f docker-compose.yaml -f docker-compose.prod.yaml pull && \
            echo 'Starting application...' && \
            docker-compose -f docker-compose.yaml -f docker-compose.prod.yaml up -d --force-recreate app && \
            echo 'Deployment completed!'"
      
      - name: Verify deployment
        run: |
          echo "Waiting for application to start..."
          sleep 45
          curl --retry 5 --retry-delay 15 -s http://${{ secrets.PRODUCTION_HOST }}:8080/actuator/health | grep '"status":"UP"'
          if [ $? -eq 0 ]; then
            echo "Deployment successful! Application is running."
          else
            echo "Deployment verification failed. Check logs for details."
            exit 1
          fi
      
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ needs.build.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true 