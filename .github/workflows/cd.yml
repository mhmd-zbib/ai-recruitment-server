name: CD Pipeline

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    branches: [master, dev]
    types:
      - completed
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - production

jobs:
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    if: ${{ (github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'dev') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'development') }}
    environment:
      name: development
      url: ${{ vars.DEV_APP_URL }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
        
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Make Scripts Executable
        run: |
          chmod +x run.sh
          chmod +x scripts/build/docker-build.sh
          chmod +x scripts/deploy/prod-deploy.sh
      
      - name: Create .env file
        run: |
          echo "SPRING_PROFILES_ACTIVE=dev" > .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "JDBC_DATABASE_URL=${{ secrets.DEV_DB_URL }}" >> .env
          echo "JDBC_DATABASE_USERNAME=${{ secrets.DEV_DB_USERNAME }}" >> .env
          echo "JDBC_DATABASE_PASSWORD=${{ secrets.DEV_DB_PASSWORD }}" >> .env
      
      - name: Verify Code
        run: |
          ./run.sh verify
      
      - name: Run Tests
        run: |
          ./run.sh test
      
      - name: Build Docker Image
        run: |
          BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          VCS_REF=$(git rev-parse --short HEAD)
          VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout)
          
          ./scripts/build/docker-build.sh --version=$VERSION \
            --registry=${{ vars.DOCKER_REGISTRY }}/${{ github.repository_owner }} \
            --push
      
      - name: Deploy to Railway
        uses: bervProject/railway-deploy@main
        with:
          railway_token: ${{ secrets.RAILWAY_TOKEN }}
          service: ${{ vars.RAILWAY_SERVICE }}
      
      - name: Health Check
        run: |
          echo "Waiting for deployment to complete..."
          sleep 60
          attempts=0
          max_attempts=10
          
          until $(curl --output /dev/null --silent --fail ${{ vars.DEV_APP_URL }}/api/actuator/health) || [ $attempts -eq $max_attempts ]; do
            attempts=$((attempts+1))
            echo "Health check attempt $attempts of $max_attempts..."
            sleep 30
          done
          
          if [ $attempts -eq $max_attempts ]; then
            echo "Health check failed after $max_attempts attempts"
            exit 1
          fi
          
          echo "Health check successful. Deployment verified."
      
      - name: Send Deployment Notification
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: "Development Deployment ${{ job.status }}"
          SLACK_MESSAGE: "Deployment to Development environment ${{ job.status }}"
  
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: ${{ (github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'master') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production') }}
    environment:
      name: production
      url: ${{ vars.PROD_APP_URL }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
        
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Make Scripts Executable
        run: |
          chmod +x run.sh
          chmod +x scripts/build/docker-build.sh
          chmod +x scripts/deploy/prod-deploy.sh
      
      - name: Create .env file
        run: |
          echo "SPRING_PROFILES_ACTIVE=prod" > .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "JDBC_DATABASE_URL=${{ secrets.PROD_DB_URL }}" >> .env
          echo "JDBC_DATABASE_USERNAME=${{ secrets.PROD_DB_USERNAME }}" >> .env
          echo "JDBC_DATABASE_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}" >> .env
      
      - name: Verify Code
        run: |
          ./run.sh verify
      
      - name: Run Tests
        run: |
          ./run.sh test
      
      - name: Get Version
        id: get_version
        run: |
          VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      
      - name: Tag Release
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git tag -a "v${{ env.VERSION }}" -m "Release version ${{ env.VERSION }}"
          git push origin "v${{ env.VERSION }}"
      
      - name: Build and Push Docker Image
        run: |
          BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          VCS_REF=$(git rev-parse --short HEAD)
          
          ./scripts/build/docker-build.sh --version=${{ env.VERSION }} \
            --registry=${{ vars.DOCKER_REGISTRY }}/${{ github.repository_owner }} \
            --push
      
      - name: Deploy to Render
        run: |
          curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK }}
      
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: Release v${{ env.VERSION }}
          draft: false
          prerelease: false
          body: |
            ## HireSync API Release v${{ env.VERSION }}
            
            **Release Date:** $(date +'%Y-%m-%d')
            
            ### Changes in this release:
            
            - See [commit history](https://github.com/${{ github.repository }}/commits/master) for details
      
      - name: Health Check
        run: |
          echo "Waiting for deployment to complete..."
          sleep 120
          attempts=0
          max_attempts=15
          
          until $(curl --output /dev/null --silent --fail ${{ vars.PROD_APP_URL }}/api/actuator/health) || [ $attempts -eq $max_attempts ]; do
            attempts=$((attempts+1))
            echo "Health check attempt $attempts of $max_attempts..."
            sleep 30
          done
          
          if [ $attempts -eq $max_attempts ]; then
            echo "Health check failed after $max_attempts attempts"
            exit 1
          fi
          
          echo "Health check successful. Deployment verified."
      
      - name: Send Deployment Notification
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: "Production Deployment ${{ job.status }}"
          SLACK_MESSAGE: "Release v${{ env.VERSION }} deployment to Production environment ${{ job.status }}" 