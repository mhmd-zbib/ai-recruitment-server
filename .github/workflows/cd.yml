name: CD Pipeline

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    branches: [master, dev]
    types:
      - completed
  workflow_dispatch:

jobs:
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'dev' }} || (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/dev')
    environment:
      name: development
      url: ${{ vars.DEV_APP_URL }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      
      - name: Make Scripts Executable
        run: |
          chmod +x mvnw
          chmod +x scripts/docker-build.sh
      
      - name: Build Docker Image
        run: ./scripts/docker-build.sh --version=$GITHUB_SHA --registry=${{ vars.DOCKER_REGISTRY }}/${{ github.repository_owner }} --push
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Deploy to Railway
        uses: bervProject/railway-deploy@main
        with:
          railway_token: ${{ secrets.RAILWAY_TOKEN }}
          service: ${{ vars.RAILWAY_SERVICE }}
      
      - name: Health Check
        run: |
          echo "Waiting for deployment to complete..."
          sleep 60
          curl --retry 5 --retry-delay 10 -sSf ${{ vars.DEV_APP_URL }}/api/actuator/health || exit 1
  
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'master' }} || (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/master')
    environment:
      name: production
      url: ${{ vars.PROD_APP_URL }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      
      - name: Make Scripts Executable
        run: |
          chmod +x mvnw
          chmod +x scripts/docker-build.sh
      
      - name: Build and Tag Release
        run: |
          VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "Building version: $VERSION"
          ./scripts/docker-build.sh --version=$VERSION --registry=${{ vars.DOCKER_REGISTRY }}/${{ github.repository_owner }} --push
          git tag -a "v$VERSION" -m "Release version $VERSION"
          git push origin "v$VERSION"
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Deploy to Render
        run: |
          curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK }}
      
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: Release v${{ env.VERSION }}
          draft: false
          prerelease: false
      
      - name: Health Check
        run: |
          echo "Waiting for deployment to complete..."
          sleep 60
          curl --retry 5 --retry-delay 10 -sSf ${{ vars.PROD_APP_URL }}/api/actuator/health || exit 1 