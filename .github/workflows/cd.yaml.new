name: CD Pipeline

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed
    branches: [master, dev]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

# Status badge URLs:
# https://github.com/mhmd-zbib/ai-recruitment-server/actions/workflows/cd.yaml/badge.svg?branch=master
# https://github.com/mhmd-zbib/ai-recruitment-server/actions/workflows/cd.yaml/badge.svg?branch=dev

# Grant required permissions
permissions:
  contents: write    # Needed for creating releases
  packages: write    # Needed for GitHub Container Registry (ghcr.io)

concurrency:
  group: ${{ github.workflow }}-${{ github.event.workflow_run.conclusion || github.event.inputs.environment }}
  cancel-in-progress: false

env:
  DOCKER_IMAGE: hiresync
  DOCKER_REGISTRY: docker.io
  DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  # Production environment variables - using standardized naming convention
  SPRING_PROFILES_ACTIVE: prod
  DEBUG_MODE: false
  SPRINGDOC_ENABLED: false
  SWAGGER_UI_ENABLED: false
  # Essential environment variables that need to be passed to Docker builds
  POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
  POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
  POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
  POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

jobs:
  prepare:
    name: Prepare Deployment
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      version: ${{ steps.set-version.outputs.version }}
      branch: ${{ steps.set-version.outputs.branch }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.workflow_run.head_branch || github.ref }}
      
      - name: Debug Workflow Information
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Workflow run conclusion: ${{ github.event.workflow_run.conclusion }}"
          echo "Branch: ${{ github.event.workflow_run.head_branch || github.ref_name }}"
          echo "Repository owner: ${{ github.repository_owner }}"
          echo "Running CD workflow after successful CI"
      
      - name: Set environment
        id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.workflow_run.head_branch || github.ref_name }}" == "master" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi
      
      - name: Set version
        id: set-version
        run: |
          VERSION="$(git describe --tags --abbrev=0 2>/dev/null || echo 'v0.1.0')-$(git rev-parse --short HEAD)"
          BRANCH="${{ github.event.workflow_run.head_branch || github.ref_name }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION on branch: $BRANCH for environment: ${{ steps.set-env.outputs.environment }}"

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging.hiresync.example.com
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Deploy to Staging
        run: |
          echo "Deploying version ${{ needs.prepare.outputs.version }} to staging environment"
          echo "Using image: ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ needs.prepare.outputs.branch }}-latest"
          
          # Here you would add your actual deployment steps
          # For example, using SSH to connect to your staging server and update the containers
          # or using a deployment tool like Ansible, Terraform, or a cloud provider's CLI

          echo "✅ Deployment to staging completed successfully"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.environment == 'production'
    environment:
      name: production
      url: https://hiresync.example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Deploy to Production
        run: |
          echo "Deploying version ${{ needs.prepare.outputs.version }} to production environment"
          echo "Using image: ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ needs.prepare.outputs.branch }}-latest"
          
          # Here you would add your actual deployment steps
          # For example, using SSH to connect to your production server and update the containers
          # or using a deployment tool like Ansible, Terraform, or a cloud provider's CLI

          echo "✅ Deployment to production completed successfully"
      
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.prepare.outputs.version }}
          name: Release ${{ needs.prepare.outputs.version }}
          body: |
            Release ${{ needs.prepare.outputs.version }}
            Deployed on $(date)
            
            This release has been built and published to Docker Hub.
            Deployment is handled automatically.
          draft: false
          token: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Send Notification
    runs-on: ubuntu-latest
    needs: [prepare, deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Determine deployment status
        id: status
        run: |
          if [[ "${{ needs.prepare.result }}" == "success" && 
                ("${{ needs.deploy-staging.result }}" == "success" || "${{ needs.deploy-staging.result }}" == "skipped") && 
                ("${{ needs.deploy-production.result }}" == "success" || "${{ needs.deploy-production.result }}" == "skipped") ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
          fi

      - name: Send success notification
        if: steps.status.outputs.status == 'success'
        run: |
          echo "✅ Deployment to ${{ needs.prepare.outputs.environment }} completed successfully"
          echo "Version: ${{ needs.prepare.outputs.version }}"
          echo "Branch: ${{ needs.prepare.outputs.branch }}"
          # Here you would add your actual notification steps
          # For example, sending a message to Slack, Teams, or an email

      - name: Send failure notification
        if: steps.status.outputs.status == 'failure'
        run: |
          echo "❌ Deployment to ${{ needs.prepare.outputs.environment }} failed"
          echo "Version: ${{ needs.prepare.outputs.version }}"
          echo "Branch: ${{ needs.prepare.outputs.branch }}"
          # Here you would add your actual notification steps
          # For example, sending a message to Slack, Teams, or an email
