name: CI Pipeline

on:
  push:
    branches: [master, dev]
  pull_request:
    branches: [master, dev]

jobs:
  setup:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache-from: |
            ~/.m2/repository
          cache-to: |
            ~/.m2/repository

      # Ensure Maven wrapper is executable
      - name: Make Maven Wrapper Executable
        run: chmod +x ./mvnw

      # Cache workspace for other jobs
      - name: Cache Workspace
        uses: actions/cache@v3
        with:
          path: |
            .
            !target
            !.git
          key: ${{ runner.os }}-workspace-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-workspace-

  lint:
    runs-on: ubuntu-22.04
    needs: setup
    steps:
      # Restore workspace instead of checking out code
      - name: Restore Workspace
        uses: actions/cache@v3
        with:
          path: .
          key: ${{ runner.os }}-workspace-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-workspace-

      - name: Setup JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache-from: |
            ~/.m2/repository
          cache-to: |
            ~/.m2/repository

      # Fix contradictory checkstyle configuration
      - name: Lint Code
        run: ./mvnw checkstyle:check

  unit-test:
    runs-on: ubuntu-22.04
    needs: setup
    steps:
      # Restore workspace instead of checking out code
      - name: Restore Workspace
        uses: actions/cache@v3
        with:
          path: .
          key: ${{ runner.os }}-workspace-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-workspace-

      - name: Setup JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache-from: |
            ~/.m2/repository
          cache-to: |
            ~/.m2/repository

      # Run unit tests before build for more efficient pipeline
      - name: Run Unit Tests
        run: ./mvnw test -Dtest="com.zbib.hiresync.unit.**.*Test"

      # Upload test reports as artifacts (optional)
      - name: Upload Test Reports
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-reports
          path: target/surefire-reports/
          retention-days: 7
        if: always()

  build:
    runs-on: ubuntu-22.04
    needs: [lint, unit-test]
    steps:
      # Restore workspace instead of checking out code
      - name: Restore Workspace
        uses: actions/cache@v3
        with:
          path: .
          key: ${{ runner.os }}-workspace-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-workspace-

      - name: Setup JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache-from: |
            ~/.m2/repository
          cache-to: |
            ~/.m2/repository

      # Build the JAR file
      - name: Build JAR
        run: ./mvnw clean package -DskipTests=true -B -ntp

      # Use wildcard for JAR path
      - name: Upload JAR
        uses: actions/upload-artifact@v4
        with:
          name: application-jar
          path: target/hiresync-*.jar
          retention-days: 7

  docker-build:
    runs-on: ubuntu-22.04
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # Download the JAR file from the previous job
      - name: Download JAR
        uses: actions/download-artifact@v4
        with:
          name: application-jar
          path: target/

      # Set up Docker Buildx for better performance
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build Docker Image with improved caching
      - name: Build Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: false
          load: true
          tags: hiresync:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Save the Docker image as an artifact for later use
      - name: Export Docker Image
        run: docker save -o hiresync-image.tar hiresync:test

      - name: Upload Docker Image Artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: hiresync-image.tar
          retention-days: 7

  integration-test:
    runs-on: ubuntu-22.04
    needs: docker-build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache-from: |
            ~/.m2/repository
          cache-to: |
            ~/.m2/repository

      # Download the saved Docker image
      - name: Download Docker Image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: ./

      # Load the Docker image
      - name: Load Docker Image
        run: docker load -i hiresync-image.tar

      # Tag the image to match the name expected in docker-compose
      - name: Tag Docker Image for Integration Tests
        run: |
          docker tag hiresync:test local/hiresync:latest

      # Make wait-for-db.sh script executable
      - name: Make wait-for-db.sh Executable
        run: chmod +x ./scripts/wait-for-db.sh

      # Run integration tests with the Docker container
      - name: Run Integration Tests
        env:
          SPRING_PROFILES_ACTIVE: test
          SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/testdb
          SPRING_DATASOURCE_USERNAME: test
          SPRING_DATASOURCE_PASSWORD: test
          JWT_SECRET: test-secret-key-for-integration-tests-only
          JWT_ISSUER: test
          JWT_AUDIENCE: test
          JWT_EXPIRATION: 3600000
          JWT_REFRESH_EXPIRATION: 86400000
        run: |
          docker compose -f docker/docker-compose.test.yaml up -d postgres
          
          # Use wait-for-db script instead of sleep
          ./scripts/wait-for-db.sh
          
          # Run only integration tests
          ./mvnw test -Dtest="com.zbib.hiresync.integration.**.*Test"

      - name: Upload Integration Test Reports
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-reports
          path: target/surefire-reports/
          retention-days: 7
        if: always()

      - name: Shutdown Docker Compose
        run: docker compose -f docker/docker-compose.test.yaml down
        if: always()  # Always try to clean up, even on failure

  deploy:
    runs-on: ubuntu-22.04
    needs: integration-test
    # Add conditional execution based on branch/tag
    if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: ./

      - name: Load Docker Image
        run: docker load -i hiresync-image.tar

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Tag and Push Docker Image
        run: |
          # For tags, use the tag name as the image tag
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            TAG=${GITHUB_REF#refs/tags/}
            docker tag hiresync:test ${{ secrets.DOCKERHUB_USERNAME }}/hiresync:$TAG
            docker push ${{ secrets.DOCKERHUB_USERNAME }}/hiresync:$TAG
          fi
          
          # For master branch, use latest tag
          if [[ $GITHUB_REF == refs/heads/master ]]; then
            docker tag hiresync:test ${{ secrets.DOCKERHUB_USERNAME }}/hiresync:latest
            docker push ${{ secrets.DOCKERHUB_USERNAME }}/hiresync:latest
          fi
          
          # Also tag with commit SHA for traceability
          docker tag hiresync:test ${{ secrets.DOCKERHUB_USERNAME }}/hiresync:${{ github.sha }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/hiresync:${{ github.sha }}