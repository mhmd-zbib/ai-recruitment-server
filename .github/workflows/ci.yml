name: CI Pipeline

on:
  push:
    branches: [ master, dev ]
  pull_request:
    branches: [ master, dev ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly security scan on Sunday at midnight
  workflow_dispatch:

# Define environment variables globally
env:
  JAVA_VERSION: '17'
  JAVA_DISTRIBUTION: 'temurin'
  MAVEN_OPTS: '-Xmx3G -Dmaven.artifact.threads=8'
  MAVEN_ARGS: '-B -ntp'
  COVERAGE_THRESHOLD: '80'

jobs:
  validate:
    name: Validate Code
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: maven
      
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      
      - name: Prepare CI Environment
        run: |
          chmod +x ./scripts/core/ci-prepare.sh
          ./scripts/core/ci-prepare.sh
      
      - name: Check Code Format
        run: |
          cd $GITHUB_WORKSPACE
          mvn spotless:check ${{ env.MAVEN_ARGS }}
      
      - name: Static Code Analysis
        run: |
          cd $GITHUB_WORKSPACE
          mvn ${{ env.MAVEN_ARGS }} checkstyle:check pmd:check

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: validate
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: maven
      
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      
      - name: Vulnerability database cache
        uses: actions/cache@v3
        with:
          path: ~/.nvd
          key: ${{ runner.os }}-nvd-${{ github.sha }}
          restore-keys: ${{ runner.os }}-nvd-
      
      - name: OWASP Dependency Check
        run: |
          cd $GITHUB_WORKSPACE
          mvn org.owasp:dependency-check-maven:check ${{ env.MAVEN_ARGS }} -DfailBuildOnCVSS=7 -DretireJsAnalyzerEnabled=true
      
      - name: Check for secrets in code
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Upload Dependency Check Report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: dependency-check-report
          path: target/dependency-check-report.html
      
      - name: Post security report comment on PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            try {
              // Simplified summary for PR comment
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '### Security Scan Results\n' +
                  'Security scan completed. ' + 
                  (process.env.DEPENDENCY_CHECK_SUCCESS === 'true' ? '✅ No critical vulnerabilities found.' : '⚠️ Issues were found. Check artifacts for details.')
              });
            } catch (error) {
              console.error('Failed to post comment: ' + error);
            }

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: validate
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: maven
      
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      
      - name: Prepare CI Environment
        run: |
          chmod +x ./scripts/core/ci-prepare.sh
          ./scripts/core/ci-prepare.sh
      
      - name: Build Project
        run: |
          cd $GITHUB_WORKSPACE
          mvn clean compile ${{ env.MAVEN_ARGS }}
      
      - name: Run Tests with Coverage
        run: |
          cd $GITHUB_WORKSPACE
          mvn test ${{ env.MAVEN_ARGS }} jacoco:report -Dspring.profiles.active=ci
      
      - name: Check Coverage Threshold
        run: |
          COVERAGE=$(mvn ${{ env.MAVEN_ARGS }} jacoco:report -q -Djacoco.haltOnFailure=true -DminimumCoverage=${{ env.COVERAGE_THRESHOLD }} || echo "COVERAGE_FAILED")
          if [ "$COVERAGE" == "COVERAGE_FAILED" ]; then
            echo "❌ Code coverage below threshold of ${{ env.COVERAGE_THRESHOLD }}%"
            exit 1
          else
            echo "✅ Code coverage meets threshold of ${{ env.COVERAGE_THRESHOLD }}%"
          fi
      
      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: target/surefire-reports/*.xml
      
      - name: Upload Coverage Report
        uses: actions/upload-artifact@v3
        if: success()
        with:
          name: coverage-report
          path: target/site/jacoco/
      
      - name: Generate Test Summary
        if: github.event_name == 'pull_request' && always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: target/surefire-reports/*.xml
          check_name: "Test Results"

  package:
    name: Package Application
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [build-and-test, security-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: maven
      
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      
      - name: Generate Version
        id: version
        run: |
          VERSION=$(date +"%Y.%m.%d")-${GITHUB_SHA::8}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Package Application
        run: |
          cd $GITHUB_WORKSPACE
          mvn package ${{ env.MAVEN_ARGS }} -DskipTests -Drevision=${{ env.VERSION }}
      
      - name: Upload JAR
        uses: actions/upload-artifact@v3
        with:
          name: application-jar
          path: target/*.jar
          if-no-files-found: error
      
      - name: Generate Build Info
        run: |
          echo "Build completed at $(date)" > build-info.txt
          echo "Version: ${{ env.VERSION }}" >> build-info.txt
          echo "Commit: ${{ github.sha }}" >> build-info.txt
          echo "Branch: ${{ github.ref_name }}" >> build-info.txt
          echo "Built by: ${{ github.actor }}" >> build-info.txt
      
      - name: Upload Build Info
        uses: actions/upload-artifact@v3
        with:
          name: build-info
          path: build-info.txt
      
      - name: Create GitHub Release
        if: github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: Release ${{ env.VERSION }}
          tag_name: v${{ env.VERSION }}
          draft: false
          prerelease: false
          files: |
            target/*.jar
            build-info.txt

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: package
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.hiresync.example.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Download JAR
        uses: actions/download-artifact@v3
        with:
          name: application-jar
          path: target
      
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      - name: Add to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
      
      - name: Deploy to Staging
        env:
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
        run: |
          chmod +x ./scripts/core/deploy.sh
          ./scripts/core/deploy.sh --env=staging --skip-build
      
      - name: Run Health Check
        run: |
          echo "Waiting for application to start..."
          sleep 30
          HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://staging.hiresync.example.com/actuator/health)
          if [ "$HEALTH_STATUS" != "200" ]; then
            echo "Health check failed with status $HEALTH_STATUS"
            exit 1
          fi
          echo "Application is healthy!"
      
      - name: Notify Slack on Success
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: good
          SLACK_TITLE: "Staging Deployment Successful"
          SLACK_MESSAGE: "Version ${{ env.VERSION }} has been deployed to staging"
      
      - name: Notify Slack on Failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: danger
          SLACK_TITLE: "Staging Deployment Failed"
          SLACK_MESSAGE: "Deployment to staging failed"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: package
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://hiresync.example.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Download JAR
        uses: actions/download-artifact@v3
        with:
          name: application-jar
          path: target
      
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      - name: Add to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
      
      - name: Deploy to Production
        env:
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
        run: |
          chmod +x ./scripts/core/deploy.sh
          ./scripts/core/deploy.sh --env=production --skip-build
      
      - name: Run Health Check
        run: |
          echo "Waiting for application to start..."
          sleep 30
          HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://hiresync.example.com/actuator/health)
          if [ "$HEALTH_STATUS" != "200" ]; then
            echo "Health check failed with status $HEALTH_STATUS"
            exit 1
          fi
          echo "Application is healthy!"
      
      - name: Create Backup
        run: |
          chmod +x ./scripts/core/backup.sh
          ./scripts/core/backup.sh --env=production --type=db
      
      - name: Notify Slack on Production Deployment
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: good
          SLACK_TITLE: "Production Deployment Successful"
          SLACK_MESSAGE: "Version ${{ env.VERSION }} has been deployed to production"
      
      - name: Notify Slack on Failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: danger
          SLACK_TITLE: "Production Deployment Failed"
          SLACK_MESSAGE: "Deployment to production failed" 