name: Release Management

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release Type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      prerelease:
        description: 'Is this a pre-release?'
        required: true
        default: 'false'
        type: boolean

env:
  MAVEN_OPTS: '-Xmx512m'
  JAVA_VERSION: '17'
  JAVA_DISTRIBUTION: 'temurin'

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          java-version: ${{ env.JAVA_VERSION }}
          cache: maven

      - name: Get current version
        id: current_version
        run: |
          # Extract version from pom.xml, remove SNAPSHOT suffix if present
          CURRENT_VERSION=$(grep -m 1 "<version>" pom.xml | sed -e 's/<version>//' -e 's/<\/version>//' -e 's/-SNAPSHOT//' -e 's/^[[:space:]]*//')
          echo "Current version: $CURRENT_VERSION"
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Calculate new version
        id: new_version
        run: |
          CURRENT_VERSION=${{ steps.current_version.outputs.current_version }}
          RELEASE_TYPE=${{ github.event.inputs.release_type }}
          
          # Split version into parts
          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          # Calculate new version based on release type
          if [[ "$RELEASE_TYPE" == "major" ]]; then
            NEW_VERSION="$((MAJOR + 1)).0.0"
          elif [[ "$RELEASE_TYPE" == "minor" ]]; then
            NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
          else # patch
            NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
          fi
          
          # Add prerelease suffix if specified
          if [[ "${{ github.event.inputs.prerelease }}" == "true" ]]; then
            NEW_VERSION="${NEW_VERSION}-rc"
          fi
          
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update version in POM
        run: |
          mvn versions:set -DnewVersion=${{ steps.new_version.outputs.new_version }} -DgenerateBackupPoms=false
          echo "Updated POM version to ${{ steps.new_version.outputs.new_version }}"

      - name: Update version in other files
        run: |
          # Update version references in README or other files if needed
          if [[ -f "README.md" ]]; then
            sed -i "s/version: [0-9]\+\.[0-9]\+\.[0-9]\+/version: ${{ steps.new_version.outputs.new_version }}/g" README.md
          fi

      - name: Verify build with new version
        run: |
          ./mvnw clean verify -DskipTests

      - name: Commit version changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pom.xml README.md
          git commit -m "chore: bump version to ${{ steps.new_version.outputs.new_version }}"

      - name: Create tag
        run: |
          TAG_NAME="v${{ steps.new_version.outputs.new_version }}"
          git tag -a "$TAG_NAME" -m "Release ${{ steps.new_version.outputs.new_version }}"
          git push origin "$TAG_NAME"

      - name: Push changes
        run: |
          git push origin HEAD:${{ github.ref_name }}

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.new_version.outputs.new_version }}
          name: Release v${{ steps.new_version.outputs.new_version }}
          draft: false
          prerelease: ${{ github.event.inputs.prerelease == 'true' }}
          generate_release_notes: true
          token: ${{ secrets.RELEASE_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Prepare next development version
        if: ${{ github.event.inputs.prerelease != 'true' }}
        run: |
          # Calculate next development version (current version + 1 patch + SNAPSHOT)
          IFS='.' read -r -a VERSION_PARTS <<< "${{ steps.new_version.outputs.new_version }}"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          # Remove any -rc suffix from patch version
          PATCH=$(echo $PATCH | sed 's/-rc//')
          
          NEXT_DEV_VERSION="$MAJOR.$MINOR.$((PATCH + 1))-SNAPSHOT"
          
          # Update POM with next development version
          mvn versions:set -DnewVersion=$NEXT_DEV_VERSION -DgenerateBackupPoms=false
          
          # Commit and push next development version
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pom.xml
          git commit -m "chore: prepare for next development iteration"
          git push origin HEAD:${{ github.ref_name }}
          
          echo "Set next development version to $NEXT_DEV_VERSION" 