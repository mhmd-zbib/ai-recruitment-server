#!/usr/bin/env bash

# Get the script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/scripts"

# Load common utilities
source "$SCRIPT_DIR/common/logging.sh"

# Show usage information
show_usage() {
  echo "Usage: $0 COMMAND [OPTIONS]"
  echo 
  echo "Commands:"
  echo "  start       Start the application"
  echo "  stop        Stop the application"
  echo "  status      Check application status"
  echo "  logs        View application logs"
  echo "  test        Run tests"
  echo "  clean       Clean the project"
  echo 
  echo "Options:"
  echo "  --local     Use local development environment"
  echo "  --dev       Use development environment"
  echo "  --prod      Use production environment"
  echo "  --unit      Run unit tests only (with test command)"
  echo "  --build     Build after clean (with clean command)"
  echo "  --all       Clean and build all (with clean command)"
  echo "  --help      Show this help message"
  echo 
  echo "Examples:"
  echo "  $0 start --local    # Start the application in local development mode"
  echo "  $0 start --prod     # Start the application in production mode"
  echo "  $0 test             # Run all tests"
  echo "  $0 test --unit      # Run unit tests only"
  echo "  $0 clean            # Clean the project"
  echo "  $0 clean --build    # Clean and build the project"
  echo "  $0 clean --all      # Clean, build and install the project"
  echo "  $0 stop             # Stop the application"
  echo 
  exit 1
}

# Main command dispatcher
main() {
  # Check if command is provided
  if [ $# -eq 0 ]; then
    show_usage
  fi
  
  # Parse first argument as command
  COMMAND="$1"
  shift
  
  # Default environment is local if not specified
  ENVIRONMENT="local"
  
  # Parse options
  UNIT_TESTS=false
  BUILD_OPT=""
  
  for arg in "$@"; do
    case "$arg" in
      --local)
        ENVIRONMENT="local"
        ;;
      --dev)
        ENVIRONMENT="dev"
        ;;
      --prod)
        ENVIRONMENT="prod"
        ;;
      --unit)
        UNIT_TESTS=true
        ;;
      --build)
        BUILD_OPT="--build"
        ;;
      --all)
        BUILD_OPT="--all"
        ;;
      --help)
        show_usage
        ;;
    esac
  done
  
  # Check command and route to proper script
  case "$COMMAND" in
    start)
      # Execute the appropriate script quietly without duplicate logs
      if [ "$ENVIRONMENT" = "local" ]; then
        # Execute the start script directly (it will show its own logs)
        bash "$SCRIPT_DIR/local/start"
      elif [ "$ENVIRONMENT" = "dev" ]; then
        # Will be implemented in the future
        echo "[ERROR] Dev environment not implemented yet"
        exit 1
      elif [ "$ENVIRONMENT" = "prod" ]; then
        # Will be implemented in the future
        echo "[ERROR] Production environment not implemented yet"
        exit 1
      fi
      ;;
    test)
      # Execute the test script with appropriate options
      if [ "$UNIT_TESTS" = true ]; then
        bash "$SCRIPT_DIR/common/test.sh" --unit
      else
        bash "$SCRIPT_DIR/common/test.sh"
      fi
      ;;
    clean)
      # Execute the build script with appropriate options
      bash "$SCRIPT_DIR/common/build.sh" "$BUILD_OPT"
      ;;
    stop)
      echo "[ERROR] Stop command not implemented yet"
      exit 1
      ;;
    status)
      echo "[ERROR] Status command not implemented yet"
      exit 1
      ;;
    logs)
      echo "[ERROR] Logs command not implemented yet"
      exit 1
      ;;
    *)
      echo "[ERROR] Unknown command: $COMMAND"
      show_usage
      ;;
  esac
}

# Execute main function with all arguments
main "$@"
