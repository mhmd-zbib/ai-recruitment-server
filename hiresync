#!/usr/bin/env bash
set -e

# Get the absolute path of the script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/scripts"
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Define colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Check for bash version
if ((BASH_VERSINFO[0] < 4)); then
  echo -e "${RED}${BOLD}Error: This script requires Bash version 4 or higher${NC}"
  echo "Current version: $BASH_VERSION"
  exit 1
fi

# Function to display help message
show_help() {
  echo -e "${BLUE}${BOLD}HireSync - Developer Toolkit${NC}"
  echo -e "A toolkit for managing the HireSync application development lifecycle\n"
  echo -e "Usage: ./hiresync COMMAND [OPTIONS]"
  echo -e "Example: ./hiresync start\n"
  echo -e "${BOLD}Available commands:${NC}"
  echo -e "  ${BOLD}start${NC}       - Start the application"
  echo -e "  ${BOLD}quality${NC}     - Run code quality checks"
  echo -e "  ${BOLD}test${NC}        - Run tests (unit, integration)"
  echo -e "  ${BOLD}build${NC}       - Build the application"
  echo -e "  ${BOLD}deploy${NC}      - Deploy the application"
  echo -e "  ${BOLD}db${NC}          - Database operations (migrate, reset, seed)"
  echo -e "  ${BOLD}version${NC}     - Display version information"
  echo -e "  ${BOLD}help${NC}        - Display this help message\n"
  echo -e "For command-specific help, use: ./hiresync COMMAND --help"
}

# Function to check if a script exists
script_exists() {
  [ -f "$SCRIPT_DIR/$1.sh" ]
}

# Get command from first argument
COMMAND="$1"
shift || true

# Show usage if no command provided
if [ -z "$COMMAND" ] || [ "$COMMAND" == "help" ] || [ "$COMMAND" == "--help" ]; then
  show_help
  exit 0
fi

# Version command
if [ "$COMMAND" == "version" ]; then
  VERSION=$(grep -m 1 "<version>" "$PROJECT_ROOT/pom.xml" 2>/dev/null | sed 's/<[^>]*>//g' | tr -d ' \t\n\r' || echo "Unknown")
  echo -e "${BLUE}${BOLD}HireSync${NC} version ${GREEN}${VERSION}${NC}"
  exit 0
fi

# Route to appropriate script
case "$COMMAND" in
  quality)
    bash "$SCRIPT_DIR/quality-check.sh" "$@"
    ;;
  start)
    if script_exists "start"; then
      bash "$SCRIPT_DIR/start.sh" "$@"
    else
      # Fallback to direct Maven command if script doesn't exist
      echo -e "${YELLOW}Starting application with Maven...${NC}"
      cd "$PROJECT_ROOT" && mvn spring-boot:run "$@"
    fi
    ;;
  test)
    if script_exists "test"; then
      bash "$SCRIPT_DIR/test.sh" "$@"
    else
      # Fallback to direct Maven command if script doesn't exist
      echo -e "${YELLOW}Running tests with Maven...${NC}"
      cd "$PROJECT_ROOT" && mvn test "$@"
    fi
    ;;
  build)
    if script_exists "build"; then
      bash "$SCRIPT_DIR/build.sh" "$@"
    else
      # Fallback to direct Maven command if script doesn't exist
      echo -e "${YELLOW}Building application with Maven...${NC}"
      cd "$PROJECT_ROOT" && mvn clean package -DskipTests "$@"
    fi
    ;;
  db)
    if [ -z "$1" ]; then
      echo -e "${RED}Error: Missing database operation${NC}"
      echo -e "Available operations: migrate, reset, seed"
      echo -e "Usage: ./hiresync db OPERATION"
      exit 1
    fi
    
    DB_OPERATION="$1"
    shift
    
    if script_exists "db-$DB_OPERATION"; then
      bash "$SCRIPT_DIR/db-$DB_OPERATION.sh" "$@"
    else
      echo -e "${RED}Error: Unknown database operation: $DB_OPERATION${NC}"
      echo -e "Available operations: migrate, reset, seed"
      exit 1
    fi
    ;;
  *)
    if script_exists "$COMMAND"; then
      bash "$SCRIPT_DIR/${COMMAND}.sh" "$@"
    else
      echo -e "${RED}${BOLD}Error: Unknown command: $COMMAND${NC}"
      echo -e "Run ${YELLOW}./hiresync help${NC} to see available commands."
  exit 1
fi
    ;;
esac